
L3L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030f8  080030f8  000040f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  00005048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800311c  0800311c  00005048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800311c  0800311c  00005048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08003124  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000048  0800316c  00005048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800316c  00005140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000896e  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d78  00000000  00000000  0000d9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0000f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000806  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001744c  00000000  00000000  00010a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db4b  00000000  00000000  00027e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d7  00000000  00000000  000359a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b807c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  000b80c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ba9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e0 	.word	0x080030e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080030e0 	.word	0x080030e0

0800014c <update7SEG>:
const int MAX_LED = 4;
int index_led = 0;


void update7SEG ( int index )
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch ( index )
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d870      	bhi.n	800023c <update7SEG+0xf0>
 800015a:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <update7SEG+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	080001a3 	.word	0x080001a3
 8000168:	080001d5 	.word	0x080001d5
 800016c:	08000207 	.word	0x08000207
	{
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_RESET ) ;
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000176:	4834      	ldr	r0, [pc, #208]	@ (8000248 <update7SEG+0xfc>)
 8000178:	f001 ff9b 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000182:	4831      	ldr	r0, [pc, #196]	@ (8000248 <update7SEG+0xfc>)
 8000184:	f001 ff95 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800018e:	482e      	ldr	r0, [pc, #184]	@ (8000248 <update7SEG+0xfc>)
 8000190:	f001 ff8f 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800019a:	482b      	ldr	r0, [pc, #172]	@ (8000248 <update7SEG+0xfc>)
 800019c:	f001 ff89 	bl	80020b2 <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 80001a0:	e04d      	b.n	800023e <update7SEG+0xf2>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001a8:	4827      	ldr	r0, [pc, #156]	@ (8000248 <update7SEG+0xfc>)
 80001aa:	f001 ff82 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_RESET ) ;
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b4:	4824      	ldr	r0, [pc, #144]	@ (8000248 <update7SEG+0xfc>)
 80001b6:	f001 ff7c 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001c0:	4821      	ldr	r0, [pc, #132]	@ (8000248 <update7SEG+0xfc>)
 80001c2:	f001 ff76 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001cc:	481e      	ldr	r0, [pc, #120]	@ (8000248 <update7SEG+0xfc>)
 80001ce:	f001 ff70 	bl	80020b2 <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 80001d2:	e034      	b.n	800023e <update7SEG+0xf2>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	481b      	ldr	r0, [pc, #108]	@ (8000248 <update7SEG+0xfc>)
 80001dc:	f001 ff69 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e6:	4818      	ldr	r0, [pc, #96]	@ (8000248 <update7SEG+0xfc>)
 80001e8:	f001 ff63 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_RESET ) ;
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f2:	4815      	ldr	r0, [pc, #84]	@ (8000248 <update7SEG+0xfc>)
 80001f4:	f001 ff5d 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001fe:	4812      	ldr	r0, [pc, #72]	@ (8000248 <update7SEG+0xfc>)
 8000200:	f001 ff57 	bl	80020b2 <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 8000204:	e01b      	b.n	800023e <update7SEG+0xf2>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800020c:	480e      	ldr	r0, [pc, #56]	@ (8000248 <update7SEG+0xfc>)
 800020e:	f001 ff50 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	480b      	ldr	r0, [pc, #44]	@ (8000248 <update7SEG+0xfc>)
 800021a:	f001 ff4a 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000224:	4808      	ldr	r0, [pc, #32]	@ (8000248 <update7SEG+0xfc>)
 8000226:	f001 ff44 	bl	80020b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_RESET ) ;
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000230:	4805      	ldr	r0, [pc, #20]	@ (8000248 <update7SEG+0xfc>)
 8000232:	f001 ff3e 	bl	80020b2 <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			index = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
			break ;
 800023a:	e000      	b.n	800023e <update7SEG+0xf2>
		default :
			break ;
 800023c:	bf00      	nop
	}
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800

0800024c <display7SEG>:

void display7SEG(int num)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d122      	bne.n	80002a0 <display7SEG+0x54>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800025a:	2200      	movs	r2, #0
 800025c:	2101      	movs	r1, #1
 800025e:	48bd      	ldr	r0, [pc, #756]	@ (8000554 <display7SEG+0x308>)
 8000260:	f001 ff27 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	48ba      	ldr	r0, [pc, #744]	@ (8000554 <display7SEG+0x308>)
 800026a:	f001 ff22 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800026e:	2200      	movs	r2, #0
 8000270:	2104      	movs	r1, #4
 8000272:	48b8      	ldr	r0, [pc, #736]	@ (8000554 <display7SEG+0x308>)
 8000274:	f001 ff1d 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000278:	2200      	movs	r2, #0
 800027a:	2108      	movs	r1, #8
 800027c:	48b5      	ldr	r0, [pc, #724]	@ (8000554 <display7SEG+0x308>)
 800027e:	f001 ff18 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	48b3      	ldr	r0, [pc, #716]	@ (8000554 <display7SEG+0x308>)
 8000288:	f001 ff13 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	48b0      	ldr	r0, [pc, #704]	@ (8000554 <display7SEG+0x308>)
 8000292:	f001 ff0e 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	48ae      	ldr	r0, [pc, #696]	@ (8000554 <display7SEG+0x308>)
 800029c:	f001 ff09 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d122      	bne.n	80002ec <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 80002a6:	2201      	movs	r2, #1
 80002a8:	2101      	movs	r1, #1
 80002aa:	48aa      	ldr	r0, [pc, #680]	@ (8000554 <display7SEG+0x308>)
 80002ac:	f001 ff01 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80002b0:	2200      	movs	r2, #0
 80002b2:	2102      	movs	r1, #2
 80002b4:	48a7      	ldr	r0, [pc, #668]	@ (8000554 <display7SEG+0x308>)
 80002b6:	f001 fefc 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	48a5      	ldr	r0, [pc, #660]	@ (8000554 <display7SEG+0x308>)
 80002c0:	f001 fef7 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80002c4:	2201      	movs	r2, #1
 80002c6:	2108      	movs	r1, #8
 80002c8:	48a2      	ldr	r0, [pc, #648]	@ (8000554 <display7SEG+0x308>)
 80002ca:	f001 fef2 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	48a0      	ldr	r0, [pc, #640]	@ (8000554 <display7SEG+0x308>)
 80002d4:	f001 feed 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80002d8:	2201      	movs	r2, #1
 80002da:	2120      	movs	r1, #32
 80002dc:	489d      	ldr	r0, [pc, #628]	@ (8000554 <display7SEG+0x308>)
 80002de:	f001 fee8 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80002e2:	2201      	movs	r2, #1
 80002e4:	2140      	movs	r1, #64	@ 0x40
 80002e6:	489b      	ldr	r0, [pc, #620]	@ (8000554 <display7SEG+0x308>)
 80002e8:	f001 fee3 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d122      	bne.n	8000338 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80002f2:	2200      	movs	r2, #0
 80002f4:	2101      	movs	r1, #1
 80002f6:	4897      	ldr	r0, [pc, #604]	@ (8000554 <display7SEG+0x308>)
 80002f8:	f001 fedb 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	4894      	ldr	r0, [pc, #592]	@ (8000554 <display7SEG+0x308>)
 8000302:	f001 fed6 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_SET ) ;
 8000306:	2201      	movs	r2, #1
 8000308:	2104      	movs	r1, #4
 800030a:	4892      	ldr	r0, [pc, #584]	@ (8000554 <display7SEG+0x308>)
 800030c:	f001 fed1 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000310:	2200      	movs	r2, #0
 8000312:	2108      	movs	r1, #8
 8000314:	488f      	ldr	r0, [pc, #572]	@ (8000554 <display7SEG+0x308>)
 8000316:	f001 fecc 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800031a:	2200      	movs	r2, #0
 800031c:	2110      	movs	r1, #16
 800031e:	488d      	ldr	r0, [pc, #564]	@ (8000554 <display7SEG+0x308>)
 8000320:	f001 fec7 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	488a      	ldr	r0, [pc, #552]	@ (8000554 <display7SEG+0x308>)
 800032a:	f001 fec2 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800032e:	2200      	movs	r2, #0
 8000330:	2140      	movs	r1, #64	@ 0x40
 8000332:	4888      	ldr	r0, [pc, #544]	@ (8000554 <display7SEG+0x308>)
 8000334:	f001 febd 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d122      	bne.n	8000384 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	4884      	ldr	r0, [pc, #528]	@ (8000554 <display7SEG+0x308>)
 8000344:	f001 feb5 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000348:	2200      	movs	r2, #0
 800034a:	2102      	movs	r1, #2
 800034c:	4881      	ldr	r0, [pc, #516]	@ (8000554 <display7SEG+0x308>)
 800034e:	f001 feb0 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000352:	2200      	movs	r2, #0
 8000354:	2104      	movs	r1, #4
 8000356:	487f      	ldr	r0, [pc, #508]	@ (8000554 <display7SEG+0x308>)
 8000358:	f001 feab 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	487c      	ldr	r0, [pc, #496]	@ (8000554 <display7SEG+0x308>)
 8000362:	f001 fea6 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000366:	2201      	movs	r2, #1
 8000368:	2110      	movs	r1, #16
 800036a:	487a      	ldr	r0, [pc, #488]	@ (8000554 <display7SEG+0x308>)
 800036c:	f001 fea1 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	4877      	ldr	r0, [pc, #476]	@ (8000554 <display7SEG+0x308>)
 8000376:	f001 fe9c 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800037a:	2200      	movs	r2, #0
 800037c:	2140      	movs	r1, #64	@ 0x40
 800037e:	4875      	ldr	r0, [pc, #468]	@ (8000554 <display7SEG+0x308>)
 8000380:	f001 fe97 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d122      	bne.n	80003d0 <display7SEG+0x184>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 800038a:	2201      	movs	r2, #1
 800038c:	2101      	movs	r1, #1
 800038e:	4871      	ldr	r0, [pc, #452]	@ (8000554 <display7SEG+0x308>)
 8000390:	f001 fe8f 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000394:	2200      	movs	r2, #0
 8000396:	2102      	movs	r1, #2
 8000398:	486e      	ldr	r0, [pc, #440]	@ (8000554 <display7SEG+0x308>)
 800039a:	f001 fe8a 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800039e:	2200      	movs	r2, #0
 80003a0:	2104      	movs	r1, #4
 80003a2:	486c      	ldr	r0, [pc, #432]	@ (8000554 <display7SEG+0x308>)
 80003a4:	f001 fe85 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80003a8:	2201      	movs	r2, #1
 80003aa:	2108      	movs	r1, #8
 80003ac:	4869      	ldr	r0, [pc, #420]	@ (8000554 <display7SEG+0x308>)
 80003ae:	f001 fe80 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80003b2:	2201      	movs	r2, #1
 80003b4:	2110      	movs	r1, #16
 80003b6:	4867      	ldr	r0, [pc, #412]	@ (8000554 <display7SEG+0x308>)
 80003b8:	f001 fe7b 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	4864      	ldr	r0, [pc, #400]	@ (8000554 <display7SEG+0x308>)
 80003c2:	f001 fe76 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	@ 0x40
 80003ca:	4862      	ldr	r0, [pc, #392]	@ (8000554 <display7SEG+0x308>)
 80003cc:	f001 fe71 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d122      	bne.n	800041c <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80003d6:	2200      	movs	r2, #0
 80003d8:	2101      	movs	r1, #1
 80003da:	485e      	ldr	r0, [pc, #376]	@ (8000554 <display7SEG+0x308>)
 80003dc:	f001 fe69 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 80003e0:	2201      	movs	r2, #1
 80003e2:	2102      	movs	r1, #2
 80003e4:	485b      	ldr	r0, [pc, #364]	@ (8000554 <display7SEG+0x308>)
 80003e6:	f001 fe64 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80003ea:	2200      	movs	r2, #0
 80003ec:	2104      	movs	r1, #4
 80003ee:	4859      	ldr	r0, [pc, #356]	@ (8000554 <display7SEG+0x308>)
 80003f0:	f001 fe5f 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 80003f4:	2200      	movs	r2, #0
 80003f6:	2108      	movs	r1, #8
 80003f8:	4856      	ldr	r0, [pc, #344]	@ (8000554 <display7SEG+0x308>)
 80003fa:	f001 fe5a 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80003fe:	2201      	movs	r2, #1
 8000400:	2110      	movs	r1, #16
 8000402:	4854      	ldr	r0, [pc, #336]	@ (8000554 <display7SEG+0x308>)
 8000404:	f001 fe55 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000408:	2200      	movs	r2, #0
 800040a:	2120      	movs	r1, #32
 800040c:	4851      	ldr	r0, [pc, #324]	@ (8000554 <display7SEG+0x308>)
 800040e:	f001 fe50 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	@ 0x40
 8000416:	484f      	ldr	r0, [pc, #316]	@ (8000554 <display7SEG+0x308>)
 8000418:	f001 fe4b 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b06      	cmp	r3, #6
 8000420:	d122      	bne.n	8000468 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	484b      	ldr	r0, [pc, #300]	@ (8000554 <display7SEG+0x308>)
 8000428:	f001 fe43 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 800042c:	2201      	movs	r2, #1
 800042e:	2102      	movs	r1, #2
 8000430:	4848      	ldr	r0, [pc, #288]	@ (8000554 <display7SEG+0x308>)
 8000432:	f001 fe3e 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	4846      	ldr	r0, [pc, #280]	@ (8000554 <display7SEG+0x308>)
 800043c:	f001 fe39 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000440:	2200      	movs	r2, #0
 8000442:	2108      	movs	r1, #8
 8000444:	4843      	ldr	r0, [pc, #268]	@ (8000554 <display7SEG+0x308>)
 8000446:	f001 fe34 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	4841      	ldr	r0, [pc, #260]	@ (8000554 <display7SEG+0x308>)
 8000450:	f001 fe2f 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000454:	2200      	movs	r2, #0
 8000456:	2120      	movs	r1, #32
 8000458:	483e      	ldr	r0, [pc, #248]	@ (8000554 <display7SEG+0x308>)
 800045a:	f001 fe2a 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800045e:	2200      	movs	r2, #0
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	483c      	ldr	r0, [pc, #240]	@ (8000554 <display7SEG+0x308>)
 8000464:	f001 fe25 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b07      	cmp	r3, #7
 800046c:	d122      	bne.n	80004b4 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800046e:	2200      	movs	r2, #0
 8000470:	2101      	movs	r1, #1
 8000472:	4838      	ldr	r0, [pc, #224]	@ (8000554 <display7SEG+0x308>)
 8000474:	f001 fe1d 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000478:	2200      	movs	r2, #0
 800047a:	2102      	movs	r1, #2
 800047c:	4835      	ldr	r0, [pc, #212]	@ (8000554 <display7SEG+0x308>)
 800047e:	f001 fe18 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000482:	2200      	movs	r2, #0
 8000484:	2104      	movs	r1, #4
 8000486:	4833      	ldr	r0, [pc, #204]	@ (8000554 <display7SEG+0x308>)
 8000488:	f001 fe13 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	4830      	ldr	r0, [pc, #192]	@ (8000554 <display7SEG+0x308>)
 8000492:	f001 fe0e 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000496:	2201      	movs	r2, #1
 8000498:	2110      	movs	r1, #16
 800049a:	482e      	ldr	r0, [pc, #184]	@ (8000554 <display7SEG+0x308>)
 800049c:	f001 fe09 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80004a0:	2201      	movs	r2, #1
 80004a2:	2120      	movs	r1, #32
 80004a4:	482b      	ldr	r0, [pc, #172]	@ (8000554 <display7SEG+0x308>)
 80004a6:	f001 fe04 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80004aa:	2201      	movs	r2, #1
 80004ac:	2140      	movs	r1, #64	@ 0x40
 80004ae:	4829      	ldr	r0, [pc, #164]	@ (8000554 <display7SEG+0x308>)
 80004b0:	f001 fdff 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b08      	cmp	r3, #8
 80004b8:	d122      	bne.n	8000500 <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	4825      	ldr	r0, [pc, #148]	@ (8000554 <display7SEG+0x308>)
 80004c0:	f001 fdf7 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	4822      	ldr	r0, [pc, #136]	@ (8000554 <display7SEG+0x308>)
 80004ca:	f001 fdf2 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80004ce:	2200      	movs	r2, #0
 80004d0:	2104      	movs	r1, #4
 80004d2:	4820      	ldr	r0, [pc, #128]	@ (8000554 <display7SEG+0x308>)
 80004d4:	f001 fded 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	481d      	ldr	r0, [pc, #116]	@ (8000554 <display7SEG+0x308>)
 80004de:	f001 fde8 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	481b      	ldr	r0, [pc, #108]	@ (8000554 <display7SEG+0x308>)
 80004e8:	f001 fde3 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	4818      	ldr	r0, [pc, #96]	@ (8000554 <display7SEG+0x308>)
 80004f2:	f001 fdde 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 80004f6:	2200      	movs	r2, #0
 80004f8:	2140      	movs	r1, #64	@ 0x40
 80004fa:	4816      	ldr	r0, [pc, #88]	@ (8000554 <display7SEG+0x308>)
 80004fc:	f001 fdd9 	bl	80020b2 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b09      	cmp	r3, #9
 8000504:	d122      	bne.n	800054c <display7SEG+0x300>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4812      	ldr	r0, [pc, #72]	@ (8000554 <display7SEG+0x308>)
 800050c:	f001 fdd1 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000510:	2200      	movs	r2, #0
 8000512:	2102      	movs	r1, #2
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <display7SEG+0x308>)
 8000516:	f001 fdcc 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800051a:	2200      	movs	r2, #0
 800051c:	2104      	movs	r1, #4
 800051e:	480d      	ldr	r0, [pc, #52]	@ (8000554 <display7SEG+0x308>)
 8000520:	f001 fdc7 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	480a      	ldr	r0, [pc, #40]	@ (8000554 <display7SEG+0x308>)
 800052a:	f001 fdc2 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4808      	ldr	r0, [pc, #32]	@ (8000554 <display7SEG+0x308>)
 8000534:	f001 fdbd 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <display7SEG+0x308>)
 800053e:	f001 fdb8 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000542:	2200      	movs	r2, #0
 8000544:	2140      	movs	r1, #64	@ 0x40
 8000546:	4803      	ldr	r0, [pc, #12]	@ (8000554 <display7SEG+0x308>)
 8000548:	f001 fdb3 	bl	80020b2 <HAL_GPIO_WritePin>
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40010c00 	.word	0x40010c00

08000558 <isButton0Pressed>:
int button1_pressed = 0;
int button1_flag = 0;
int button2_pressed = 0;
int button2_flag = 0;

int isButton0Pressed(){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	if(button0_flag == 1){
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <isButton0Pressed+0x20>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d104      	bne.n	800056e <isButton0Pressed+0x16>
		button0_flag = 0;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <isButton0Pressed+0x20>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		return 1;
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <isButton0Pressed+0x18>
	}
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000064 	.word	0x20000064

0800057c <isButton1Pressed>:
int isButton1Pressed(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <isButton1Pressed+0x20>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d104      	bne.n	8000592 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <isButton1Pressed+0x20>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
		return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <isButton1Pressed+0x18>
	}
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000068 	.word	0x20000068

080005a0 <isButton2Pressed>:
int isButton2Pressed(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <isButton2Pressed+0x20>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d104      	bne.n	80005b6 <isButton2Pressed+0x16>
		button2_flag = 0;
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <isButton2Pressed+0x20>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <isButton2Pressed+0x18>
	}
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	2000006c 	.word	0x2000006c

080005c4 <getKeyInput>:
}



void getKeyInput()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	KeyReg20 = KeyReg10;
 80005c8:	4b69      	ldr	r3, [pc, #420]	@ (8000770 <getKeyInput+0x1ac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a69      	ldr	r2, [pc, #420]	@ (8000774 <getKeyInput+0x1b0>)
 80005ce:	6013      	str	r3, [r2, #0]
	KeyReg10 = KeyReg00;
 80005d0:	4b69      	ldr	r3, [pc, #420]	@ (8000778 <getKeyInput+0x1b4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a66      	ldr	r2, [pc, #408]	@ (8000770 <getKeyInput+0x1ac>)
 80005d6:	6013      	str	r3, [r2, #0]
	// Add your key
	KeyReg00 = HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin);
 80005d8:	2102      	movs	r1, #2
 80005da:	4868      	ldr	r0, [pc, #416]	@ (800077c <getKeyInput+0x1b8>)
 80005dc:	f001 fd52 	bl	8002084 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b64      	ldr	r3, [pc, #400]	@ (8000778 <getKeyInput+0x1b4>)
 80005e6:	601a      	str	r2, [r3, #0]

	if ((KeyReg10 == KeyReg00) && (KeyReg10 == KeyReg20))
 80005e8:	4b61      	ldr	r3, [pc, #388]	@ (8000770 <getKeyInput+0x1ac>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b62      	ldr	r3, [pc, #392]	@ (8000778 <getKeyInput+0x1b4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d12f      	bne.n	8000654 <getKeyInput+0x90>
 80005f4:	4b5e      	ldr	r3, [pc, #376]	@ (8000770 <getKeyInput+0x1ac>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000774 <getKeyInput+0x1b0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d129      	bne.n	8000654 <getKeyInput+0x90>
	{
		if (KeyReg20 != KeyReg30)
 8000600:	4b5c      	ldr	r3, [pc, #368]	@ (8000774 <getKeyInput+0x1b0>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b5e      	ldr	r3, [pc, #376]	@ (8000780 <getKeyInput+0x1bc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d00f      	beq.n	800062c <getKeyInput+0x68>
		{
			KeyReg30 = KeyReg20;
 800060c:	4b59      	ldr	r3, [pc, #356]	@ (8000774 <getKeyInput+0x1b0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a5b      	ldr	r2, [pc, #364]	@ (8000780 <getKeyInput+0x1bc>)
 8000612:	6013      	str	r3, [r2, #0]
			if (KeyReg30 == PRESSED_STATE)
 8000614:	4b5a      	ldr	r3, [pc, #360]	@ (8000780 <getKeyInput+0x1bc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11b      	bne.n	8000654 <getKeyInput+0x90>
			{
					TimeOutForKeyPress = 500;
 800061c:	4b59      	ldr	r3, [pc, #356]	@ (8000784 <getKeyInput+0x1c0>)
 800061e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000622:	601a      	str	r2, [r3, #0]
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
					button0_flag = 1;
 8000624:	4b58      	ldr	r3, [pc, #352]	@ (8000788 <getKeyInput+0x1c4>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e013      	b.n	8000654 <getKeyInput+0x90>
			}

		}
		else
		{
			TimeOutForKeyPress --;
 800062c:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <getKeyInput+0x1c0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a54      	ldr	r2, [pc, #336]	@ (8000784 <getKeyInput+0x1c0>)
 8000634:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0)
 8000636:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <getKeyInput+0x1c0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10a      	bne.n	8000654 <getKeyInput+0x90>
			{
				TimeOutForKeyPress = 500;
 800063e:	4b51      	ldr	r3, [pc, #324]	@ (8000784 <getKeyInput+0x1c0>)
 8000640:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000644:	601a      	str	r2, [r3, #0]
				if (KeyReg30 == PRESSED_STATE)
 8000646:	4b4e      	ldr	r3, [pc, #312]	@ (8000780 <getKeyInput+0x1bc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <getKeyInput+0x90>
				{
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
					button0_flag = 1;
 800064e:	4b4e      	ldr	r3, [pc, #312]	@ (8000788 <getKeyInput+0x1c4>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	KeyReg21 = KeyReg11;
 8000654:	4b4d      	ldr	r3, [pc, #308]	@ (800078c <getKeyInput+0x1c8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a4d      	ldr	r2, [pc, #308]	@ (8000790 <getKeyInput+0x1cc>)
 800065a:	6013      	str	r3, [r2, #0]
    KeyReg11 = KeyReg01;
 800065c:	4b4d      	ldr	r3, [pc, #308]	@ (8000794 <getKeyInput+0x1d0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a4a      	ldr	r2, [pc, #296]	@ (800078c <getKeyInput+0x1c8>)
 8000662:	6013      	str	r3, [r2, #0]
    // Add your key
    KeyReg01 = HAL_GPIO_ReadPin(btn2_GPIO_Port, btn2_Pin);
 8000664:	2104      	movs	r1, #4
 8000666:	4845      	ldr	r0, [pc, #276]	@ (800077c <getKeyInput+0x1b8>)
 8000668:	f001 fd0c 	bl	8002084 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b48      	ldr	r3, [pc, #288]	@ (8000794 <getKeyInput+0x1d0>)
 8000672:	601a      	str	r2, [r3, #0]

    if ((KeyReg11 == KeyReg01) && (KeyReg11 == KeyReg21))
 8000674:	4b45      	ldr	r3, [pc, #276]	@ (800078c <getKeyInput+0x1c8>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <getKeyInput+0x1d0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d12f      	bne.n	80006e0 <getKeyInput+0x11c>
 8000680:	4b42      	ldr	r3, [pc, #264]	@ (800078c <getKeyInput+0x1c8>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <getKeyInput+0x1cc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d129      	bne.n	80006e0 <getKeyInput+0x11c>
    {
    	if (KeyReg21 != KeyReg31)
 800068c:	4b40      	ldr	r3, [pc, #256]	@ (8000790 <getKeyInput+0x1cc>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <getKeyInput+0x1d4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d00f      	beq.n	80006b8 <getKeyInput+0xf4>
    	{
    		KeyReg31 = KeyReg21;
 8000698:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <getKeyInput+0x1cc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3e      	ldr	r2, [pc, #248]	@ (8000798 <getKeyInput+0x1d4>)
 800069e:	6013      	str	r3, [r2, #0]
    		if (KeyReg31 == PRESSED_STATE)
 80006a0:	4b3d      	ldr	r3, [pc, #244]	@ (8000798 <getKeyInput+0x1d4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d11b      	bne.n	80006e0 <getKeyInput+0x11c>
    		{
    			TimeOutForKeyPress = 500;
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <getKeyInput+0x1c0>)
 80006aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ae:	601a      	str	r2, [r3, #0]
    			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    			button1_flag = 1;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <getKeyInput+0x1d8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e013      	b.n	80006e0 <getKeyInput+0x11c>
    		}
    	}
    	else
    	{
    		TimeOutForKeyPress --;
 80006b8:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <getKeyInput+0x1c0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a31      	ldr	r2, [pc, #196]	@ (8000784 <getKeyInput+0x1c0>)
 80006c0:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0)
 80006c2:	4b30      	ldr	r3, [pc, #192]	@ (8000784 <getKeyInput+0x1c0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10a      	bne.n	80006e0 <getKeyInput+0x11c>
    		{
    			TimeOutForKeyPress = 500;
 80006ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <getKeyInput+0x1c0>)
 80006cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d0:	601a      	str	r2, [r3, #0]
    			if (KeyReg31 == PRESSED_STATE)
 80006d2:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <getKeyInput+0x1d4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <getKeyInput+0x11c>
    			{
    				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    				button1_flag = 1;
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <getKeyInput+0x1d8>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
    			}
    		}
    	}
    }
    KeyReg22 = KeyReg12;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <getKeyInput+0x1dc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	@ (80007a4 <getKeyInput+0x1e0>)
 80006e6:	6013      	str	r3, [r2, #0]
    KeyReg12 = KeyReg02;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <getKeyInput+0x1e4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <getKeyInput+0x1dc>)
 80006ee:	6013      	str	r3, [r2, #0]
      // Add your key
    KeyReg02 = HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin);
 80006f0:	2108      	movs	r1, #8
 80006f2:	4822      	ldr	r0, [pc, #136]	@ (800077c <getKeyInput+0x1b8>)
 80006f4:	f001 fcc6 	bl	8002084 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <getKeyInput+0x1e4>)
 80006fe:	601a      	str	r2, [r3, #0]

    if ((KeyReg12 == KeyReg02) && (KeyReg12 == KeyReg22))
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <getKeyInput+0x1dc>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <getKeyInput+0x1e4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d12f      	bne.n	800076c <getKeyInput+0x1a8>
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <getKeyInput+0x1dc>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <getKeyInput+0x1e0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d129      	bne.n	800076c <getKeyInput+0x1a8>
    {
    	if (KeyReg22 != KeyReg32)
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <getKeyInput+0x1e0>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <getKeyInput+0x1e8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d00f      	beq.n	8000744 <getKeyInput+0x180>
    	{
    		KeyReg32 = KeyReg22;
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <getKeyInput+0x1e0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <getKeyInput+0x1e8>)
 800072a:	6013      	str	r3, [r2, #0]
    		if (KeyReg32 == PRESSED_STATE)
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <getKeyInput+0x1e8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11b      	bne.n	800076c <getKeyInput+0x1a8>
    		{
    			TimeOutForKeyPress = 500;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <getKeyInput+0x1c0>)
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	601a      	str	r2, [r3, #0]
    			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    			button2_flag = 1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <getKeyInput+0x1ec>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
            		button2_flag = 1;
            	}
            }
    	}
    }
}
 8000742:	e013      	b.n	800076c <getKeyInput+0x1a8>
    		TimeOutForKeyPress --;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <getKeyInput+0x1c0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <getKeyInput+0x1c0>)
 800074c:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress == 0)
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <getKeyInput+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10a      	bne.n	800076c <getKeyInput+0x1a8>
            	TimeOutForKeyPress = 500;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <getKeyInput+0x1c0>)
 8000758:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800075c:	601a      	str	r2, [r3, #0]
            	if (KeyReg32 == PRESSED_STATE)
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <getKeyInput+0x1e8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <getKeyInput+0x1a8>
            		button2_flag = 1;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <getKeyInput+0x1ec>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000004 	.word	0x20000004
 8000774:	20000008 	.word	0x20000008
 8000778:	20000000 	.word	0x20000000
 800077c:	40010800 	.word	0x40010800
 8000780:	2000000c 	.word	0x2000000c
 8000784:	20000030 	.word	0x20000030
 8000788:	20000064 	.word	0x20000064
 800078c:	20000014 	.word	0x20000014
 8000790:	20000018 	.word	0x20000018
 8000794:	20000010 	.word	0x20000010
 8000798:	2000001c 	.word	0x2000001c
 800079c:	20000068 	.word	0x20000068
 80007a0:	20000024 	.word	0x20000024
 80007a4:	20000028 	.word	0x20000028
 80007a8:	20000020 	.word	0x20000020
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	2000006c 	.word	0x2000006c

080007b4 <fsm_auto>:
int num_to_display_1 = 0;
int num_to_display_2 = 0;


void fsm_auto()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if(is_timer_expired(3) && (status == AUTO_GREEN_RED ||
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 ff39 	bl	8001630 <is_timer_expired>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d034      	beq.n	800082e <fsm_auto+0x7a>
 80007c4:	4b8b      	ldr	r3, [pc, #556]	@ (80009f4 <fsm_auto+0x240>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d00f      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_RED_GREEN ||
 80007cc:	4b89      	ldr	r3, [pc, #548]	@ (80009f4 <fsm_auto+0x240>)
 80007ce:	681b      	ldr	r3, [r3, #0]
	if(is_timer_expired(3) && (status == AUTO_GREEN_RED ||
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d00b      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_YELLOW_RED ||
 80007d4:	4b87      	ldr	r3, [pc, #540]	@ (80009f4 <fsm_auto+0x240>)
 80007d6:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_GREEN ||
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d007      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_RED_YELLOW ||
 80007dc:	4b85      	ldr	r3, [pc, #532]	@ (80009f4 <fsm_auto+0x240>)
 80007de:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_YELLOW_RED ||
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d003      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_INIT))
 80007e4:	4b83      	ldr	r3, [pc, #524]	@ (80009f4 <fsm_auto+0x240>)
 80007e6:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_YELLOW ||
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d120      	bne.n	800082e <fsm_auto+0x7a>
	{
		getKeyInput();
 80007ec:	f7ff feea 	bl	80005c4 <getKeyInput>
		if (isButton0Pressed())
 80007f0:	f7ff feb2 	bl	8000558 <isButton0Pressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d015      	beq.n	8000826 <fsm_auto+0x72>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	487e      	ldr	r0, [pc, #504]	@ (80009f8 <fsm_auto+0x244>)
 80007fe:	f001 fc70 	bl	80020e2 <HAL_GPIO_TogglePin>
			clear();
 8000802:	f001 f867 	bl	80018d4 <clear>
			led_buffer[0] = 0;
 8000806:	4b7d      	ldr	r3, [pc, #500]	@ (80009fc <fsm_auto+0x248>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 0;
 800080c:	4b7b      	ldr	r3, [pc, #492]	@ (80009fc <fsm_auto+0x248>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
			led_buffer[2] = 0;
 8000812:	4b7a      	ldr	r3, [pc, #488]	@ (80009fc <fsm_auto+0x248>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 0;
 8000818:	4b78      	ldr	r3, [pc, #480]	@ (80009fc <fsm_auto+0x248>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
			status = MANUAL_INIT;
 800081e:	4b75      	ldr	r3, [pc, #468]	@ (80009f4 <fsm_auto+0x240>)
 8000820:	220a      	movs	r2, #10
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e003      	b.n	800082e <fsm_auto+0x7a>
		}
		else set_timer(3, 20);
 8000826:	2114      	movs	r1, #20
 8000828:	2003      	movs	r0, #3
 800082a:	f000 feab 	bl	8001584 <set_timer>
	}


	if(is_timer_expired(5)  && (status == AUTO_GREEN_RED ||
 800082e:	2005      	movs	r0, #5
 8000830:	f000 fefe 	bl	8001630 <is_timer_expired>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d054      	beq.n	80008e4 <fsm_auto+0x130>
 800083a:	4b6e      	ldr	r3, [pc, #440]	@ (80009f4 <fsm_auto+0x240>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d00f      	beq.n	8000862 <fsm_auto+0xae>
			   	   	   	   	   status == AUTO_RED_GREEN ||
 8000842:	4b6c      	ldr	r3, [pc, #432]	@ (80009f4 <fsm_auto+0x240>)
 8000844:	681b      	ldr	r3, [r3, #0]
	if(is_timer_expired(5)  && (status == AUTO_GREEN_RED ||
 8000846:	2b02      	cmp	r3, #2
 8000848:	d00b      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_YELLOW_RED ||
 800084a:	4b6a      	ldr	r3, [pc, #424]	@ (80009f4 <fsm_auto+0x240>)
 800084c:	681b      	ldr	r3, [r3, #0]
			   	   	   	   	   status == AUTO_RED_GREEN ||
 800084e:	2b05      	cmp	r3, #5
 8000850:	d007      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_RED_YELLOW ||
 8000852:	4b68      	ldr	r3, [pc, #416]	@ (80009f4 <fsm_auto+0x240>)
 8000854:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_YELLOW_RED ||
 8000856:	2b03      	cmp	r3, #3
 8000858:	d003      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_INIT))
 800085a:	4b66      	ldr	r3, [pc, #408]	@ (80009f4 <fsm_auto+0x240>)
 800085c:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_YELLOW ||
 800085e:	2b01      	cmp	r3, #1
 8000860:	d140      	bne.n	80008e4 <fsm_auto+0x130>
	{
		num_to_display_1--;
 8000862:	4b67      	ldr	r3, [pc, #412]	@ (8000a00 <fsm_auto+0x24c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a65      	ldr	r2, [pc, #404]	@ (8000a00 <fsm_auto+0x24c>)
 800086a:	6013      	str	r3, [r2, #0]
		num_to_display_2--;
 800086c:	4b65      	ldr	r3, [pc, #404]	@ (8000a04 <fsm_auto+0x250>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b01      	subs	r3, #1
 8000872:	4a64      	ldr	r2, [pc, #400]	@ (8000a04 <fsm_auto+0x250>)
 8000874:	6013      	str	r3, [r2, #0]
		led_buffer[0] = num_to_display_1/10;
 8000876:	4b62      	ldr	r3, [pc, #392]	@ (8000a00 <fsm_auto+0x24c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a63      	ldr	r2, [pc, #396]	@ (8000a08 <fsm_auto+0x254>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1092      	asrs	r2, r2, #2
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a5d      	ldr	r2, [pc, #372]	@ (80009fc <fsm_auto+0x248>)
 8000888:	6013      	str	r3, [r2, #0]
		led_buffer[1] = num_to_display_1%10;
 800088a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a00 <fsm_auto+0x24c>)
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a08 <fsm_auto+0x254>)
 8000890:	fb83 2301 	smull	r2, r3, r3, r1
 8000894:	109a      	asrs	r2, r3, #2
 8000896:	17cb      	asrs	r3, r1, #31
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	1aca      	subs	r2, r1, r3
 80008a4:	4b55      	ldr	r3, [pc, #340]	@ (80009fc <fsm_auto+0x248>)
 80008a6:	605a      	str	r2, [r3, #4]
		led_buffer[2] = num_to_display_2/10;
 80008a8:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <fsm_auto+0x250>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a56      	ldr	r2, [pc, #344]	@ (8000a08 <fsm_auto+0x254>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1092      	asrs	r2, r2, #2
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	4a50      	ldr	r2, [pc, #320]	@ (80009fc <fsm_auto+0x248>)
 80008ba:	6093      	str	r3, [r2, #8]
		led_buffer[3] = num_to_display_2%10;
 80008bc:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <fsm_auto+0x250>)
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	4b51      	ldr	r3, [pc, #324]	@ (8000a08 <fsm_auto+0x254>)
 80008c2:	fb83 2301 	smull	r2, r3, r3, r1
 80008c6:	109a      	asrs	r2, r3, #2
 80008c8:	17cb      	asrs	r3, r1, #31
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1aca      	subs	r2, r1, r3
 80008d6:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <fsm_auto+0x248>)
 80008d8:	60da      	str	r2, [r3, #12]
		set_timer(5, 1000);
 80008da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008de:	2005      	movs	r0, #5
 80008e0:	f000 fe50 	bl	8001584 <set_timer>
	}
	if(is_timer_expired(4))
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 fea3 	bl	8001630 <is_timer_expired>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01c      	beq.n	800092a <fsm_auto+0x176>
	{
		if(i == 4) i = 0;
 80008f0:	4b46      	ldr	r3, [pc, #280]	@ (8000a0c <fsm_auto+0x258>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d102      	bne.n	80008fe <fsm_auto+0x14a>
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <fsm_auto+0x258>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		update7SEG(i);
 80008fe:	4b43      	ldr	r3, [pc, #268]	@ (8000a0c <fsm_auto+0x258>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc22 	bl	800014c <update7SEG>
		display7SEG(led_buffer[i]);
 8000908:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <fsm_auto+0x258>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3b      	ldr	r2, [pc, #236]	@ (80009fc <fsm_auto+0x248>)
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc9a 	bl	800024c <display7SEG>
		i++;
 8000918:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <fsm_auto+0x258>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a0c <fsm_auto+0x258>)
 8000920:	6013      	str	r3, [r2, #0]
		set_timer(4, 150);
 8000922:	2196      	movs	r1, #150	@ 0x96
 8000924:	2004      	movs	r0, #4
 8000926:	f000 fe2d 	bl	8001584 <set_timer>
	}


	if(is_timer_expired(2))
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fe80 	bl	8001630 <is_timer_expired>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d05b      	beq.n	80009ee <fsm_auto+0x23a>
	{
		switch (status)
 8000936:	4b2f      	ldr	r3, [pc, #188]	@ (80009f4 <fsm_auto+0x240>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	2b04      	cmp	r3, #4
 800093e:	d855      	bhi.n	80009ec <fsm_auto+0x238>
 8000940:	a201      	add	r2, pc, #4	@ (adr r2, 8000948 <fsm_auto+0x194>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	0800095d 	.word	0x0800095d
 800094c:	08000965 	.word	0x08000965
 8000950:	08000987 	.word	0x08000987
 8000954:	080009a9 	.word	0x080009a9
 8000958:	080009cb 	.word	0x080009cb
		{
			case AUTO_INIT:
				status = AUTO_RED_GREEN;
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <fsm_auto+0x240>)
 800095e:	2202      	movs	r2, #2
 8000960:	601a      	str	r2, [r3, #0]
//				set_timer(2, 5);
//				set_timer(3, 4);
//				set_timer(4, 3);
//				set_timer(5, 2);
				break;
 8000962:	e044      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_RED_GREEN:
				led_red_and_green();
 8000964:	f000 ff0e 	bl	8001784 <led_red_and_green>
				num_to_display_1 = 5;
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <fsm_auto+0x24c>)
 800096a:	2205      	movs	r2, #5
 800096c:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 3;
 800096e:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <fsm_auto+0x250>)
 8000970:	2203      	movs	r2, #3
 8000972:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_YELLOW;
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <fsm_auto+0x240>)
 8000976:	2203      	movs	r2, #3
 8000978:	601a      	str	r2, [r3, #0]
				set_timer(2, 3000);
 800097a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800097e:	2002      	movs	r0, #2
 8000980:	f000 fe00 	bl	8001584 <set_timer>
				break;
 8000984:	e033      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_RED_YELLOW:
				led_red_and_yellow();
 8000986:	f000 ff27 	bl	80017d8 <led_red_and_yellow>
				num_to_display_1 = 2;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <fsm_auto+0x24c>)
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 2;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <fsm_auto+0x250>)
 8000992:	2202      	movs	r2, #2
 8000994:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <fsm_auto+0x240>)
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
				set_timer(2, 2000);
 800099c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80009a0:	2002      	movs	r0, #2
 80009a2:	f000 fdef 	bl	8001584 <set_timer>
				break;
 80009a6:	e022      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_GREEN_RED:
				led_green_and_red();
 80009a8:	f000 ff40 	bl	800182c <led_green_and_red>
				num_to_display_1 = 3;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <fsm_auto+0x24c>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 5;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <fsm_auto+0x250>)
 80009b4:	2205      	movs	r2, #5
 80009b6:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW_RED;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <fsm_auto+0x240>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	601a      	str	r2, [r3, #0]
				set_timer(2, 3000);
 80009be:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 fdde 	bl	8001584 <set_timer>
				break;
 80009c8:	e011      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_YELLOW_RED:
				led_yellow_and_red();
 80009ca:	f000 ff59 	bl	8001880 <led_yellow_and_red>
				num_to_display_1 = 2;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <fsm_auto+0x24c>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 2;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <fsm_auto+0x250>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <fsm_auto+0x240>)
 80009dc:	2204      	movs	r2, #4
 80009de:	601a      	str	r2, [r3, #0]
				set_timer(2, 2000);
 80009e0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 fdcd 	bl	8001584 <set_timer>
				break;
 80009ea:	e000      	b.n	80009ee <fsm_auto+0x23a>
			default:
				break;
 80009ec:	bf00      	nop
		}
	}
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000034 	.word	0x20000034
 80009f8:	40010800 	.word	0x40010800
 80009fc:	20000074 	.word	0x20000074
 8000a00:	20000084 	.word	0x20000084
 8000a04:	20000088 	.word	0x20000088
 8000a08:	66666667 	.word	0x66666667
 8000a0c:	20000070 	.word	0x20000070

08000a10 <fsm_manual>:

int num_to_display1 = 0;
int num_to_display2 = 0;

void fsm_manual()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	if(is_timer_expired(8))
 8000a14:	2008      	movs	r0, #8
 8000a16:	f000 fe0b 	bl	8001630 <is_timer_expired>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <fsm_manual+0x1c>
	{
		getKeyInput();
 8000a20:	f7ff fdd0 	bl	80005c4 <getKeyInput>
		set_timer(8, 20);
 8000a24:	2114      	movs	r1, #20
 8000a26:	2008      	movs	r0, #8
 8000a28:	f000 fdac 	bl	8001584 <set_timer>
	}

	if(is_timer_expired(9))
 8000a2c:	2009      	movs	r0, #9
 8000a2e:	f000 fdff 	bl	8001630 <is_timer_expired>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 8466 	beq.w	8001306 <fsm_manual+0x8f6>
	{
		switch(status)
 8000a3a:	4b91      	ldr	r3, [pc, #580]	@ (8000c80 <fsm_manual+0x270>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3b06      	subs	r3, #6
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	f200 845f 	bhi.w	8001304 <fsm_manual+0x8f4>
 8000a46:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <fsm_manual+0x3c>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000f97 	.word	0x08000f97
 8000a50:	08001063 	.word	0x08001063
 8000a54:	08001165 	.word	0x08001165
 8000a58:	08001231 	.word	0x08001231
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000acb 	.word	0x08000acb
 8000a64:	08000ca5 	.word	0x08000ca5
 8000a68:	08000e77 	.word	0x08000e77
		{
		case MANUAL_INIT:
			toggle();
 8000a6c:	f000 ff5c 	bl	8001928 <toggle>
			led_buffer[0] = 0;
 8000a70:	4b84      	ldr	r3, [pc, #528]	@ (8000c84 <fsm_manual+0x274>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 0;
 8000a76:	4b83      	ldr	r3, [pc, #524]	@ (8000c84 <fsm_manual+0x274>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
			led_buffer[2] = 0;
 8000a7c:	4b81      	ldr	r3, [pc, #516]	@ (8000c84 <fsm_manual+0x274>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 0;
 8000a82:	4b80      	ldr	r3, [pc, #512]	@ (8000c84 <fsm_manual+0x274>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
			if(isButton0Pressed())
 8000a88:	f7ff fd66 	bl	8000558 <isButton0Pressed>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <fsm_manual+0x8e>
			{
				clear();
 8000a92:	f000 ff1f 	bl	80018d4 <clear>
				status = RED_SET;
 8000a96:	4b7a      	ldr	r3, [pc, #488]	@ (8000c80 <fsm_manual+0x270>)
 8000a98:	220b      	movs	r2, #11
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	e00e      	b.n	8000abc <fsm_manual+0xac>
			}
			else if(isButton2Pressed())
 8000a9e:	f7ff fd7f 	bl	80005a0 <isButton2Pressed>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d005      	beq.n	8000ab4 <fsm_manual+0xa4>
			{
				clear();
 8000aa8:	f000 ff14 	bl	80018d4 <clear>
				status = AUTO_INIT;
 8000aac:	4b74      	ldr	r3, [pc, #464]	@ (8000c80 <fsm_manual+0x270>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <fsm_manual+0xac>
			}
			else set_timer(3, 20);
 8000ab4:	2114      	movs	r1, #20
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 fd64 	bl	8001584 <set_timer>
			set_timer(9, 500);
 8000abc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 fd5f 	bl	8001584 <set_timer>
			break;
 8000ac6:	f000 bc1e 	b.w	8001306 <fsm_manual+0x8f6>
		case RED_SET:
			togglered();
 8000aca:	f000 ff51 	bl	8001970 <togglered>
			if(isButton0Pressed())
 8000ace:	f7ff fd43 	bl	8000558 <isButton0Pressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d034      	beq.n	8000b42 <fsm_manual+0x132>
			{
				clear();
 8000ad8:	f000 fefc 	bl	80018d4 <clear>
				if (red_time <= 1) red_time = 2;
 8000adc:	4b6a      	ldr	r3, [pc, #424]	@ (8000c88 <fsm_manual+0x278>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	dc03      	bgt.n	8000aec <fsm_manual+0xdc>
 8000ae4:	4b68      	ldr	r3, [pc, #416]	@ (8000c88 <fsm_manual+0x278>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e003      	b.n	8000af4 <fsm_manual+0xe4>
				else red = red_time;
 8000aec:	4b66      	ldr	r3, [pc, #408]	@ (8000c88 <fsm_manual+0x278>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a66      	ldr	r2, [pc, #408]	@ (8000c8c <fsm_manual+0x27c>)
 8000af2:	6013      	str	r3, [r2, #0]
				status = YELLOW_SET;
 8000af4:	4b62      	ldr	r3, [pc, #392]	@ (8000c80 <fsm_manual+0x270>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
				led_buffer[0] = yellow_time/10;
 8000afa:	4b65      	ldr	r3, [pc, #404]	@ (8000c90 <fsm_manual+0x280>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a65      	ldr	r2, [pc, #404]	@ (8000c94 <fsm_manual+0x284>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	1092      	asrs	r2, r2, #2
 8000b06:	17db      	asrs	r3, r3, #31
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8000c84 <fsm_manual+0x274>)
 8000b0c:	6013      	str	r3, [r2, #0]
				led_buffer[1] = yellow_time%10;
 8000b0e:	4b60      	ldr	r3, [pc, #384]	@ (8000c90 <fsm_manual+0x280>)
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	4b60      	ldr	r3, [pc, #384]	@ (8000c94 <fsm_manual+0x284>)
 8000b14:	fb83 2301 	smull	r2, r3, r3, r1
 8000b18:	109a      	asrs	r2, r3, #2
 8000b1a:	17cb      	asrs	r3, r1, #31
 8000b1c:	1ad2      	subs	r2, r2, r3
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	1aca      	subs	r2, r1, r3
 8000b28:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <fsm_manual+0x274>)
 8000b2a:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000b2c:	4b55      	ldr	r3, [pc, #340]	@ (8000c84 <fsm_manual+0x274>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000b32:	4b54      	ldr	r3, [pc, #336]	@ (8000c84 <fsm_manual+0x274>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000b38:	2114      	movs	r1, #20
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 fd22 	bl	8001584 <set_timer>
 8000b40:	e098      	b.n	8000c74 <fsm_manual+0x264>
			}
			else if(isButton1Pressed())
 8000b42:	f7ff fd1b 	bl	800057c <isButton1Pressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d02a      	beq.n	8000ba2 <fsm_manual+0x192>
			{
				clear();
 8000b4c:	f000 fec2 	bl	80018d4 <clear>
				red_time++;
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <fsm_manual+0x278>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a4c      	ldr	r2, [pc, #304]	@ (8000c88 <fsm_manual+0x278>)
 8000b58:	6013      	str	r3, [r2, #0]
				led_buffer[0] = red_time/10;
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c88 <fsm_manual+0x278>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c94 <fsm_manual+0x284>)
 8000b60:	fb82 1203 	smull	r1, r2, r2, r3
 8000b64:	1092      	asrs	r2, r2, #2
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a46      	ldr	r2, [pc, #280]	@ (8000c84 <fsm_manual+0x274>)
 8000b6c:	6013      	str	r3, [r2, #0]
				led_buffer[1] = red_time%10;
 8000b6e:	4b46      	ldr	r3, [pc, #280]	@ (8000c88 <fsm_manual+0x278>)
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4b48      	ldr	r3, [pc, #288]	@ (8000c94 <fsm_manual+0x284>)
 8000b74:	fb83 2301 	smull	r2, r3, r3, r1
 8000b78:	109a      	asrs	r2, r3, #2
 8000b7a:	17cb      	asrs	r3, r1, #31
 8000b7c:	1ad2      	subs	r2, r2, r3
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	4b3e      	ldr	r3, [pc, #248]	@ (8000c84 <fsm_manual+0x274>)
 8000b8a:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c84 <fsm_manual+0x274>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000b92:	4b3c      	ldr	r3, [pc, #240]	@ (8000c84 <fsm_manual+0x274>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000b98:	2114      	movs	r1, #20
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 fcf2 	bl	8001584 <set_timer>
 8000ba0:	e068      	b.n	8000c74 <fsm_manual+0x264>
			}
			else if(isButton2Pressed())
 8000ba2:	f7ff fcfd 	bl	80005a0 <isButton2Pressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d05f      	beq.n	8000c6c <fsm_manual+0x25c>
			{
				clear();
 8000bac:	f000 fe92 	bl	80018d4 <clear>
				if(red_time <= 1)
 8000bb0:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <fsm_manual+0x278>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	dc1c      	bgt.n	8000bf2 <fsm_manual+0x1e2>
				{
					red_time = 2;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	@ (8000c88 <fsm_manual+0x278>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]
					yellow_time = 1;
 8000bbe:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <fsm_manual+0x280>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000bc4:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <fsm_manual+0x278>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <fsm_manual+0x280>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <fsm_manual+0x288>)
 8000bd0:	6013      	str	r3, [r2, #0]

					red = red_time;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <fsm_manual+0x278>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c8c <fsm_manual+0x27c>)
 8000bd8:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <fsm_manual+0x280>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a2f      	ldr	r2, [pc, #188]	@ (8000c9c <fsm_manual+0x28c>)
 8000be0:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <fsm_manual+0x288>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca0 <fsm_manual+0x290>)
 8000be8:	6013      	str	r3, [r2, #0]

					status = MAN_RED_GREEN;
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <fsm_manual+0x270>)
 8000bec:	2206      	movs	r2, #6
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e037      	b.n	8000c62 <fsm_manual+0x252>
				}
				else
				{
					yellow_time = 1;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <fsm_manual+0x280>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000bf8:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <fsm_manual+0x278>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <fsm_manual+0x280>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4a25      	ldr	r2, [pc, #148]	@ (8000c98 <fsm_manual+0x288>)
 8000c04:	6013      	str	r3, [r2, #0]
					red = red_time;
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <fsm_manual+0x278>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <fsm_manual+0x27c>)
 8000c0c:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <fsm_manual+0x280>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <fsm_manual+0x28c>)
 8000c14:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <fsm_manual+0x288>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <fsm_manual+0x290>)
 8000c1c:	6013      	str	r3, [r2, #0]
					led_buffer[0] = red_time/10;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <fsm_manual+0x278>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <fsm_manual+0x284>)
 8000c24:	fb82 1203 	smull	r1, r2, r2, r3
 8000c28:	1092      	asrs	r2, r2, #2
 8000c2a:	17db      	asrs	r3, r3, #31
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <fsm_manual+0x274>)
 8000c30:	6013      	str	r3, [r2, #0]
					led_buffer[1] = red_time%10;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <fsm_manual+0x278>)
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <fsm_manual+0x284>)
 8000c38:	fb83 2301 	smull	r2, r3, r3, r1
 8000c3c:	109a      	asrs	r2, r3, #2
 8000c3e:	17cb      	asrs	r3, r1, #31
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	1aca      	subs	r2, r1, r3
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <fsm_manual+0x274>)
 8000c4e:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <fsm_manual+0x274>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <fsm_manual+0x274>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
					status = MAN_RED_GREEN;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <fsm_manual+0x270>)
 8000c5e:	2206      	movs	r2, #6
 8000c60:	601a      	str	r2, [r3, #0]
				}
				set_timer(3, 20);
 8000c62:	2114      	movs	r1, #20
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 fc8d 	bl	8001584 <set_timer>
 8000c6a:	e003      	b.n	8000c74 <fsm_manual+0x264>
			}
			else set_timer(3, 20);
 8000c6c:	2114      	movs	r1, #20
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 fc88 	bl	8001584 <set_timer>
			set_timer(9, 500);
 8000c74:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c78:	2009      	movs	r0, #9
 8000c7a:	f000 fc83 	bl	8001584 <set_timer>
			break;
 8000c7e:	e342      	b.n	8001306 <fsm_manual+0x8f6>
 8000c80:	20000034 	.word	0x20000034
 8000c84:	20000074 	.word	0x20000074
 8000c88:	2000008c 	.word	0x2000008c
 8000c8c:	20000098 	.word	0x20000098
 8000c90:	20000090 	.word	0x20000090
 8000c94:	66666667 	.word	0x66666667
 8000c98:	20000094 	.word	0x20000094
 8000c9c:	2000009c 	.word	0x2000009c
 8000ca0:	200000a0 	.word	0x200000a0
		case YELLOW_SET:
			toggleyellow();
 8000ca4:	f000 fe8c 	bl	80019c0 <toggleyellow>
			if(isButton0Pressed())
 8000ca8:	f7ff fc56 	bl	8000558 <isButton0Pressed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d02f      	beq.n	8000d12 <fsm_manual+0x302>
			{
				clear();
 8000cb2:	f000 fe0f 	bl	80018d4 <clear>
				if (yellow_time <= 1) yellow_time = 1;
 8000cb6:	4b9b      	ldr	r3, [pc, #620]	@ (8000f24 <fsm_manual+0x514>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	dc02      	bgt.n	8000cc4 <fsm_manual+0x2b4>
 8000cbe:	4b99      	ldr	r3, [pc, #612]	@ (8000f24 <fsm_manual+0x514>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
				status = GREEN_SET;
 8000cc4:	4b98      	ldr	r3, [pc, #608]	@ (8000f28 <fsm_manual+0x518>)
 8000cc6:	220d      	movs	r2, #13
 8000cc8:	601a      	str	r2, [r3, #0]
				led_buffer[0] = green_time/10;
 8000cca:	4b98      	ldr	r3, [pc, #608]	@ (8000f2c <fsm_manual+0x51c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a98      	ldr	r2, [pc, #608]	@ (8000f30 <fsm_manual+0x520>)
 8000cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd4:	1092      	asrs	r2, r2, #2
 8000cd6:	17db      	asrs	r3, r3, #31
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	4a96      	ldr	r2, [pc, #600]	@ (8000f34 <fsm_manual+0x524>)
 8000cdc:	6013      	str	r3, [r2, #0]
				led_buffer[1] = green_time%10;
 8000cde:	4b93      	ldr	r3, [pc, #588]	@ (8000f2c <fsm_manual+0x51c>)
 8000ce0:	6819      	ldr	r1, [r3, #0]
 8000ce2:	4b93      	ldr	r3, [pc, #588]	@ (8000f30 <fsm_manual+0x520>)
 8000ce4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ce8:	109a      	asrs	r2, r3, #2
 8000cea:	17cb      	asrs	r3, r1, #31
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	1aca      	subs	r2, r1, r3
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8000f34 <fsm_manual+0x524>)
 8000cfa:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8000f34 <fsm_manual+0x524>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000d02:	4b8c      	ldr	r3, [pc, #560]	@ (8000f34 <fsm_manual+0x524>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000d08:	2114      	movs	r1, #20
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 fc3a 	bl	8001584 <set_timer>
 8000d10:	e0ab      	b.n	8000e6a <fsm_manual+0x45a>
			}
			else if(isButton1Pressed())
 8000d12:	f7ff fc33 	bl	800057c <isButton1Pressed>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d028      	beq.n	8000d6e <fsm_manual+0x35e>
			{
				yellow_time++;
 8000d1c:	4b81      	ldr	r3, [pc, #516]	@ (8000f24 <fsm_manual+0x514>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a80      	ldr	r2, [pc, #512]	@ (8000f24 <fsm_manual+0x514>)
 8000d24:	6013      	str	r3, [r2, #0]
				led_buffer[0] = yellow_time/10;
 8000d26:	4b7f      	ldr	r3, [pc, #508]	@ (8000f24 <fsm_manual+0x514>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a81      	ldr	r2, [pc, #516]	@ (8000f30 <fsm_manual+0x520>)
 8000d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d30:	1092      	asrs	r2, r2, #2
 8000d32:	17db      	asrs	r3, r3, #31
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a7f      	ldr	r2, [pc, #508]	@ (8000f34 <fsm_manual+0x524>)
 8000d38:	6013      	str	r3, [r2, #0]
				led_buffer[1] = yellow_time%10;
 8000d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f24 <fsm_manual+0x514>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f30 <fsm_manual+0x520>)
 8000d40:	fb83 2301 	smull	r2, r3, r3, r1
 8000d44:	109a      	asrs	r2, r3, #2
 8000d46:	17cb      	asrs	r3, r1, #31
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	1aca      	subs	r2, r1, r3
 8000d54:	4b77      	ldr	r3, [pc, #476]	@ (8000f34 <fsm_manual+0x524>)
 8000d56:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000d58:	4b76      	ldr	r3, [pc, #472]	@ (8000f34 <fsm_manual+0x524>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000d5e:	4b75      	ldr	r3, [pc, #468]	@ (8000f34 <fsm_manual+0x524>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000d64:	2114      	movs	r1, #20
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 fc0c 	bl	8001584 <set_timer>
 8000d6c:	e07d      	b.n	8000e6a <fsm_manual+0x45a>
			}
			else if(isButton2Pressed())
 8000d6e:	f7ff fc17 	bl	80005a0 <isButton2Pressed>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d074      	beq.n	8000e62 <fsm_manual+0x452>
			{
				clear();
 8000d78:	f000 fdac 	bl	80018d4 <clear>
				if(yellow_time < 1)
 8000d7c:	4b69      	ldr	r3, [pc, #420]	@ (8000f24 <fsm_manual+0x514>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dc38      	bgt.n	8000df6 <fsm_manual+0x3e6>
				{
					yellow_time = 1;
 8000d84:	4b67      	ldr	r3, [pc, #412]	@ (8000f24 <fsm_manual+0x514>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000f38 <fsm_manual+0x528>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b65      	ldr	r3, [pc, #404]	@ (8000f24 <fsm_manual+0x514>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	4a65      	ldr	r2, [pc, #404]	@ (8000f2c <fsm_manual+0x51c>)
 8000d96:	6013      	str	r3, [r2, #0]
					red = red_time;
 8000d98:	4b67      	ldr	r3, [pc, #412]	@ (8000f38 <fsm_manual+0x528>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a67      	ldr	r2, [pc, #412]	@ (8000f3c <fsm_manual+0x52c>)
 8000d9e:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000da0:	4b60      	ldr	r3, [pc, #384]	@ (8000f24 <fsm_manual+0x514>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a66      	ldr	r2, [pc, #408]	@ (8000f40 <fsm_manual+0x530>)
 8000da6:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000da8:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <fsm_manual+0x51c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a65      	ldr	r2, [pc, #404]	@ (8000f44 <fsm_manual+0x534>)
 8000dae:	6013      	str	r3, [r2, #0]
					led_buffer[0] = yellow_time/10;
 8000db0:	4b5c      	ldr	r3, [pc, #368]	@ (8000f24 <fsm_manual+0x514>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a5e      	ldr	r2, [pc, #376]	@ (8000f30 <fsm_manual+0x520>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	1092      	asrs	r2, r2, #2
 8000dbc:	17db      	asrs	r3, r3, #31
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8000f34 <fsm_manual+0x524>)
 8000dc2:	6013      	str	r3, [r2, #0]
					led_buffer[1] = yellow_time%10;
 8000dc4:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <fsm_manual+0x514>)
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	4b59      	ldr	r3, [pc, #356]	@ (8000f30 <fsm_manual+0x520>)
 8000dca:	fb83 2301 	smull	r2, r3, r3, r1
 8000dce:	109a      	asrs	r2, r3, #2
 8000dd0:	17cb      	asrs	r3, r1, #31
 8000dd2:	1ad2      	subs	r2, r2, r3
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	1aca      	subs	r2, r1, r3
 8000dde:	4b55      	ldr	r3, [pc, #340]	@ (8000f34 <fsm_manual+0x524>)
 8000de0:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000de2:	4b54      	ldr	r3, [pc, #336]	@ (8000f34 <fsm_manual+0x524>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000de8:	4b52      	ldr	r3, [pc, #328]	@ (8000f34 <fsm_manual+0x524>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
					status = MAN_RED_GREEN;
 8000dee:	4b4e      	ldr	r3, [pc, #312]	@ (8000f28 <fsm_manual+0x518>)
 8000df0:	2206      	movs	r2, #6
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e030      	b.n	8000e58 <fsm_manual+0x448>
				}
				else if (yellow_time >= red_time)
 8000df6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <fsm_manual+0x514>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000f38 <fsm_manual+0x528>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	db18      	blt.n	8000e34 <fsm_manual+0x424>
				{
					red_time = 0;
 8000e02:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <fsm_manual+0x528>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
					yellow_time = 0;
 8000e08:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <fsm_manual+0x514>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
					green_time = 0;
 8000e0e:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <fsm_manual+0x51c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
					led_buffer[0] = 0;
 8000e14:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <fsm_manual+0x524>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
					led_buffer[1] = 0;
 8000e1a:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <fsm_manual+0x524>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000e20:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <fsm_manual+0x524>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <fsm_manual+0x524>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
					status = RED_SET;
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f28 <fsm_manual+0x518>)
 8000e2e:	220b      	movs	r2, #11
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e011      	b.n	8000e58 <fsm_manual+0x448>
				}
				else{
					yellow = yellow_time;
 8000e34:	4b3b      	ldr	r3, [pc, #236]	@ (8000f24 <fsm_manual+0x514>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a41      	ldr	r2, [pc, #260]	@ (8000f40 <fsm_manual+0x530>)
 8000e3a:	6013      	str	r3, [r2, #0]
					green = green_time = red_time - yellow_time;
 8000e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f38 <fsm_manual+0x528>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b38      	ldr	r3, [pc, #224]	@ (8000f24 <fsm_manual+0x514>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4a39      	ldr	r2, [pc, #228]	@ (8000f2c <fsm_manual+0x51c>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b38      	ldr	r3, [pc, #224]	@ (8000f2c <fsm_manual+0x51c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f44 <fsm_manual+0x534>)
 8000e50:	6013      	str	r3, [r2, #0]
					status = MAN_RED_GREEN;
 8000e52:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <fsm_manual+0x518>)
 8000e54:	2206      	movs	r2, #6
 8000e56:	601a      	str	r2, [r3, #0]
				}
				set_timer(3, 20);
 8000e58:	2114      	movs	r1, #20
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 fb92 	bl	8001584 <set_timer>
 8000e60:	e003      	b.n	8000e6a <fsm_manual+0x45a>
			}
			else set_timer(3, 20);
 8000e62:	2114      	movs	r1, #20
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fb8d 	bl	8001584 <set_timer>
			set_timer(9, 500);
 8000e6a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e6e:	2009      	movs	r0, #9
 8000e70:	f000 fb88 	bl	8001584 <set_timer>
			break;
 8000e74:	e247      	b.n	8001306 <fsm_manual+0x8f6>
		case GREEN_SET:
			togglegreen();
 8000e76:	f000 fdcb 	bl	8001a10 <togglegreen>
			if(isButton0Pressed())
 8000e7a:	f7ff fb6d 	bl	8000558 <isButton0Pressed>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <fsm_manual+0x488>
			{
				clear();
 8000e84:	f000 fd26 	bl	80018d4 <clear>
				status = RED_SET;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <fsm_manual+0x518>)
 8000e8a:	220b      	movs	r2, #11
 8000e8c:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 8000e8e:	2114      	movs	r1, #20
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fb77 	bl	8001584 <set_timer>
 8000e96:	e078      	b.n	8000f8a <fsm_manual+0x57a>
			}
			else if(isButton1Pressed())
 8000e98:	f7ff fb70 	bl	800057c <isButton1Pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d028      	beq.n	8000ef4 <fsm_manual+0x4e4>
			{
				green_time++;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <fsm_manual+0x51c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a20      	ldr	r2, [pc, #128]	@ (8000f2c <fsm_manual+0x51c>)
 8000eaa:	6013      	str	r3, [r2, #0]
				led_buffer[0] = green_time/10;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <fsm_manual+0x51c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f30 <fsm_manual+0x520>)
 8000eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb6:	1092      	asrs	r2, r2, #2
 8000eb8:	17db      	asrs	r3, r3, #31
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f34 <fsm_manual+0x524>)
 8000ebe:	6013      	str	r3, [r2, #0]
				led_buffer[1] = green_time%10;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <fsm_manual+0x51c>)
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <fsm_manual+0x520>)
 8000ec6:	fb83 2301 	smull	r2, r3, r3, r1
 8000eca:	109a      	asrs	r2, r3, #2
 8000ecc:	17cb      	asrs	r3, r1, #31
 8000ece:	1ad2      	subs	r2, r2, r3
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1aca      	subs	r2, r1, r3
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <fsm_manual+0x524>)
 8000edc:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <fsm_manual+0x524>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <fsm_manual+0x524>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000eea:	2114      	movs	r1, #20
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fb49 	bl	8001584 <set_timer>
 8000ef2:	e04a      	b.n	8000f8a <fsm_manual+0x57a>
			}
			else if(isButton2Pressed())
 8000ef4:	f7ff fb54 	bl	80005a0 <isButton2Pressed>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d041      	beq.n	8000f82 <fsm_manual+0x572>
			{
				if(green_time == (red_time - yellow_time) && (yellow_time != 0))
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <fsm_manual+0x528>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <fsm_manual+0x514>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <fsm_manual+0x51c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d11b      	bne.n	8000f48 <fsm_manual+0x538>
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <fsm_manual+0x514>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d017      	beq.n	8000f48 <fsm_manual+0x538>
				{
					clear();
 8000f18:	f000 fcdc 	bl	80018d4 <clear>
					status = MAN_RED_GREEN;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	@ (8000f28 <fsm_manual+0x518>)
 8000f1e:	2206      	movs	r2, #6
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e029      	b.n	8000f78 <fsm_manual+0x568>
 8000f24:	20000090 	.word	0x20000090
 8000f28:	20000034 	.word	0x20000034
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	66666667 	.word	0x66666667
 8000f34:	20000074 	.word	0x20000074
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	20000098 	.word	0x20000098
 8000f40:	2000009c 	.word	0x2000009c
 8000f44:	200000a0 	.word	0x200000a0
				}
				else {
					status = RED_SET;
 8000f48:	4b7d      	ldr	r3, [pc, #500]	@ (8001140 <fsm_manual+0x730>)
 8000f4a:	220b      	movs	r2, #11
 8000f4c:	601a      	str	r2, [r3, #0]
					red_time = 0;
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001144 <fsm_manual+0x734>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
					yellow_time = 0;
 8000f54:	4b7c      	ldr	r3, [pc, #496]	@ (8001148 <fsm_manual+0x738>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
					green_time = 0;
 8000f5a:	4b7c      	ldr	r3, [pc, #496]	@ (800114c <fsm_manual+0x73c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
					led_buffer[0] = 0;
 8000f60:	4b7b      	ldr	r3, [pc, #492]	@ (8001150 <fsm_manual+0x740>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
					led_buffer[1] = 0;
 8000f66:	4b7a      	ldr	r3, [pc, #488]	@ (8001150 <fsm_manual+0x740>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000f6c:	4b78      	ldr	r3, [pc, #480]	@ (8001150 <fsm_manual+0x740>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000f72:	4b77      	ldr	r3, [pc, #476]	@ (8001150 <fsm_manual+0x740>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
				}
				set_timer(3, 20);
 8000f78:	2114      	movs	r1, #20
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fb02 	bl	8001584 <set_timer>
 8000f80:	e003      	b.n	8000f8a <fsm_manual+0x57a>
			}
			else set_timer(3, 20);
 8000f82:	2114      	movs	r1, #20
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 fafd 	bl	8001584 <set_timer>
			set_timer(9, 500);
 8000f8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f8e:	2009      	movs	r0, #9
 8000f90:	f000 faf8 	bl	8001584 <set_timer>
			break;
 8000f94:	e1b7      	b.n	8001306 <fsm_manual+0x8f6>
		case MAN_RED_GREEN:

			led_red_and_green();
 8000f96:	f000 fbf5 	bl	8001784 <led_red_and_green>
			led_buffer[0] = red/10;
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <fsm_manual+0x744>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <fsm_manual+0x748>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	1092      	asrs	r2, r2, #2
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a69      	ldr	r2, [pc, #420]	@ (8001150 <fsm_manual+0x740>)
 8000fac:	6013      	str	r3, [r2, #0]
			led_buffer[1] = red%10;
 8000fae:	4b69      	ldr	r3, [pc, #420]	@ (8001154 <fsm_manual+0x744>)
 8000fb0:	6819      	ldr	r1, [r3, #0]
 8000fb2:	4b69      	ldr	r3, [pc, #420]	@ (8001158 <fsm_manual+0x748>)
 8000fb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fb8:	109a      	asrs	r2, r3, #2
 8000fba:	17cb      	asrs	r3, r1, #31
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1aca      	subs	r2, r1, r3
 8000fc8:	4b61      	ldr	r3, [pc, #388]	@ (8001150 <fsm_manual+0x740>)
 8000fca:	605a      	str	r2, [r3, #4]
			led_buffer[2] = green/10;
 8000fcc:	4b63      	ldr	r3, [pc, #396]	@ (800115c <fsm_manual+0x74c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a61      	ldr	r2, [pc, #388]	@ (8001158 <fsm_manual+0x748>)
 8000fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd6:	1092      	asrs	r2, r2, #2
 8000fd8:	17db      	asrs	r3, r3, #31
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8001150 <fsm_manual+0x740>)
 8000fde:	6093      	str	r3, [r2, #8]
			led_buffer[3] = green%10;
 8000fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800115c <fsm_manual+0x74c>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8001158 <fsm_manual+0x748>)
 8000fe6:	fb83 2301 	smull	r2, r3, r3, r1
 8000fea:	109a      	asrs	r2, r3, #2
 8000fec:	17cb      	asrs	r3, r1, #31
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	1aca      	subs	r2, r1, r3
 8000ffa:	4b55      	ldr	r3, [pc, #340]	@ (8001150 <fsm_manual+0x740>)
 8000ffc:	60da      	str	r2, [r3, #12]
			red--;
 8000ffe:	4b55      	ldr	r3, [pc, #340]	@ (8001154 <fsm_manual+0x744>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	4a53      	ldr	r2, [pc, #332]	@ (8001154 <fsm_manual+0x744>)
 8001006:	6013      	str	r3, [r2, #0]
			green--;
 8001008:	4b54      	ldr	r3, [pc, #336]	@ (800115c <fsm_manual+0x74c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a53      	ldr	r2, [pc, #332]	@ (800115c <fsm_manual+0x74c>)
 8001010:	6013      	str	r3, [r2, #0]
			if(green == 0)
 8001012:	4b52      	ldr	r3, [pc, #328]	@ (800115c <fsm_manual+0x74c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <fsm_manual+0x618>
			{
				green = green_time;
 800101a:	4b4c      	ldr	r3, [pc, #304]	@ (800114c <fsm_manual+0x73c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a4f      	ldr	r2, [pc, #316]	@ (800115c <fsm_manual+0x74c>)
 8001020:	6013      	str	r3, [r2, #0]
				status = MAN_RED_YELLOW;
 8001022:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <fsm_manual+0x730>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 8001028:	f7ff faba 	bl	80005a0 <isButton2Pressed>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d011      	beq.n	8001056 <fsm_manual+0x646>
			{
				clear();
 8001032:	f000 fc4f 	bl	80018d4 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 8001036:	4b43      	ldr	r3, [pc, #268]	@ (8001144 <fsm_manual+0x734>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	4b42      	ldr	r3, [pc, #264]	@ (8001148 <fsm_manual+0x738>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	4b42      	ldr	r3, [pc, #264]	@ (800114c <fsm_manual+0x73c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 8001048:	4b3d      	ldr	r3, [pc, #244]	@ (8001140 <fsm_manual+0x730>)
 800104a:	220a      	movs	r2, #10
 800104c:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 800104e:	2114      	movs	r1, #20
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fa97 	bl	8001584 <set_timer>
			}
			set_timer(9, 1000);
 8001056:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800105a:	2009      	movs	r0, #9
 800105c:	f000 fa92 	bl	8001584 <set_timer>
			break;
 8001060:	e151      	b.n	8001306 <fsm_manual+0x8f6>
		case MAN_RED_YELLOW:

			led_red_and_yellow();
 8001062:	f000 fbb9 	bl	80017d8 <led_red_and_yellow>
			led_buffer[0] = red/10;
 8001066:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <fsm_manual+0x744>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <fsm_manual+0x748>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1092      	asrs	r2, r2, #2
 8001072:	17db      	asrs	r3, r3, #31
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4a36      	ldr	r2, [pc, #216]	@ (8001150 <fsm_manual+0x740>)
 8001078:	6013      	str	r3, [r2, #0]
			led_buffer[1] = red%10;
 800107a:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <fsm_manual+0x744>)
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <fsm_manual+0x748>)
 8001080:	fb83 2301 	smull	r2, r3, r3, r1
 8001084:	109a      	asrs	r2, r3, #2
 8001086:	17cb      	asrs	r3, r1, #31
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	1aca      	subs	r2, r1, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <fsm_manual+0x740>)
 8001096:	605a      	str	r2, [r3, #4]
			led_buffer[2] = yellow/10;
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <fsm_manual+0x750>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2e      	ldr	r2, [pc, #184]	@ (8001158 <fsm_manual+0x748>)
 800109e:	fb82 1203 	smull	r1, r2, r2, r3
 80010a2:	1092      	asrs	r2, r2, #2
 80010a4:	17db      	asrs	r3, r3, #31
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a29      	ldr	r2, [pc, #164]	@ (8001150 <fsm_manual+0x740>)
 80010aa:	6093      	str	r3, [r2, #8]
			led_buffer[3] = yellow%10;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <fsm_manual+0x750>)
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <fsm_manual+0x748>)
 80010b2:	fb83 2301 	smull	r2, r3, r3, r1
 80010b6:	109a      	asrs	r2, r3, #2
 80010b8:	17cb      	asrs	r3, r1, #31
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1aca      	subs	r2, r1, r3
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <fsm_manual+0x740>)
 80010c8:	60da      	str	r2, [r3, #12]
			red--;
 80010ca:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <fsm_manual+0x744>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <fsm_manual+0x744>)
 80010d2:	6013      	str	r3, [r2, #0]
			yellow--;
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <fsm_manual+0x750>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <fsm_manual+0x750>)
 80010dc:	6013      	str	r3, [r2, #0]
			if(red == 0)red = red_time;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <fsm_manual+0x744>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <fsm_manual+0x6de>
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <fsm_manual+0x734>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <fsm_manual+0x744>)
 80010ec:	6013      	str	r3, [r2, #0]
			if(yellow == 0)
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <fsm_manual+0x750>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <fsm_manual+0x6f4>
			{
				yellow = yellow_time;
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <fsm_manual+0x738>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <fsm_manual+0x750>)
 80010fc:	6013      	str	r3, [r2, #0]
				status = MAN_GREEN_RED;
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <fsm_manual+0x730>)
 8001100:	2208      	movs	r2, #8
 8001102:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 8001104:	f7ff fa4c 	bl	80005a0 <isButton2Pressed>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d011      	beq.n	8001132 <fsm_manual+0x722>
			{
				clear();
 800110e:	f000 fbe1 	bl	80018d4 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <fsm_manual+0x734>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <fsm_manual+0x738>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <fsm_manual+0x73c>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <fsm_manual+0x730>)
 8001126:	220a      	movs	r2, #10
 8001128:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 800112a:	2114      	movs	r1, #20
 800112c:	2003      	movs	r0, #3
 800112e:	f000 fa29 	bl	8001584 <set_timer>
			}
			set_timer(9, 1000);
 8001132:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001136:	2009      	movs	r0, #9
 8001138:	f000 fa24 	bl	8001584 <set_timer>
			break;
 800113c:	e0e3      	b.n	8001306 <fsm_manual+0x8f6>
 800113e:	bf00      	nop
 8001140:	20000034 	.word	0x20000034
 8001144:	2000008c 	.word	0x2000008c
 8001148:	20000090 	.word	0x20000090
 800114c:	20000094 	.word	0x20000094
 8001150:	20000074 	.word	0x20000074
 8001154:	20000098 	.word	0x20000098
 8001158:	66666667 	.word	0x66666667
 800115c:	200000a0 	.word	0x200000a0
 8001160:	2000009c 	.word	0x2000009c
		case MAN_GREEN_RED:

			led_green_and_red();
 8001164:	f000 fb62 	bl	800182c <led_green_and_red>
			led_buffer[0] = green/10;
 8001168:	4b68      	ldr	r3, [pc, #416]	@ (800130c <fsm_manual+0x8fc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a68      	ldr	r2, [pc, #416]	@ (8001310 <fsm_manual+0x900>)
 800116e:	fb82 1203 	smull	r1, r2, r2, r3
 8001172:	1092      	asrs	r2, r2, #2
 8001174:	17db      	asrs	r3, r3, #31
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4a66      	ldr	r2, [pc, #408]	@ (8001314 <fsm_manual+0x904>)
 800117a:	6013      	str	r3, [r2, #0]
			led_buffer[1] = green%10;
 800117c:	4b63      	ldr	r3, [pc, #396]	@ (800130c <fsm_manual+0x8fc>)
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	4b63      	ldr	r3, [pc, #396]	@ (8001310 <fsm_manual+0x900>)
 8001182:	fb83 2301 	smull	r2, r3, r3, r1
 8001186:	109a      	asrs	r2, r3, #2
 8001188:	17cb      	asrs	r3, r1, #31
 800118a:	1ad2      	subs	r2, r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	1aca      	subs	r2, r1, r3
 8001196:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <fsm_manual+0x904>)
 8001198:	605a      	str	r2, [r3, #4]
			led_buffer[2] = red/10;
 800119a:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <fsm_manual+0x908>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a5c      	ldr	r2, [pc, #368]	@ (8001310 <fsm_manual+0x900>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1092      	asrs	r2, r2, #2
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001314 <fsm_manual+0x904>)
 80011ac:	6093      	str	r3, [r2, #8]
			led_buffer[3] = red%10;
 80011ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001318 <fsm_manual+0x908>)
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <fsm_manual+0x900>)
 80011b4:	fb83 2301 	smull	r2, r3, r3, r1
 80011b8:	109a      	asrs	r2, r3, #2
 80011ba:	17cb      	asrs	r3, r1, #31
 80011bc:	1ad2      	subs	r2, r2, r3
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	1aca      	subs	r2, r1, r3
 80011c8:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <fsm_manual+0x904>)
 80011ca:	60da      	str	r2, [r3, #12]
			red--;
 80011cc:	4b52      	ldr	r3, [pc, #328]	@ (8001318 <fsm_manual+0x908>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a51      	ldr	r2, [pc, #324]	@ (8001318 <fsm_manual+0x908>)
 80011d4:	6013      	str	r3, [r2, #0]
			green--;
 80011d6:	4b4d      	ldr	r3, [pc, #308]	@ (800130c <fsm_manual+0x8fc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a4b      	ldr	r2, [pc, #300]	@ (800130c <fsm_manual+0x8fc>)
 80011de:	6013      	str	r3, [r2, #0]
			if(green == 0)
 80011e0:	4b4a      	ldr	r3, [pc, #296]	@ (800130c <fsm_manual+0x8fc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <fsm_manual+0x7e6>
			{
				green = green_time;
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <fsm_manual+0x90c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a47      	ldr	r2, [pc, #284]	@ (800130c <fsm_manual+0x8fc>)
 80011ee:	6013      	str	r3, [r2, #0]
				status = MAN_YELLOW_RED;
 80011f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001320 <fsm_manual+0x910>)
 80011f2:	2209      	movs	r2, #9
 80011f4:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 80011f6:	f7ff f9d3 	bl	80005a0 <isButton2Pressed>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d011      	beq.n	8001224 <fsm_manual+0x814>
			{
				clear();
 8001200:	f000 fb68 	bl	80018d4 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 8001204:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <fsm_manual+0x914>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <fsm_manual+0x918>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4b42      	ldr	r3, [pc, #264]	@ (800131c <fsm_manual+0x90c>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <fsm_manual+0x910>)
 8001218:	220a      	movs	r2, #10
 800121a:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 800121c:	2114      	movs	r1, #20
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f9b0 	bl	8001584 <set_timer>
			}
			set_timer(9, 1000);
 8001224:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001228:	2009      	movs	r0, #9
 800122a:	f000 f9ab 	bl	8001584 <set_timer>
			break;
 800122e:	e06a      	b.n	8001306 <fsm_manual+0x8f6>
		case MAN_YELLOW_RED:

			led_yellow_and_red();
 8001230:	f000 fb26 	bl	8001880 <led_yellow_and_red>
			led_buffer[0] = yellow/10;
 8001234:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <fsm_manual+0x91c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a35      	ldr	r2, [pc, #212]	@ (8001310 <fsm_manual+0x900>)
 800123a:	fb82 1203 	smull	r1, r2, r2, r3
 800123e:	1092      	asrs	r2, r2, #2
 8001240:	17db      	asrs	r3, r3, #31
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4a33      	ldr	r2, [pc, #204]	@ (8001314 <fsm_manual+0x904>)
 8001246:	6013      	str	r3, [r2, #0]
			led_buffer[1] = yellow%10;
 8001248:	4b38      	ldr	r3, [pc, #224]	@ (800132c <fsm_manual+0x91c>)
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <fsm_manual+0x900>)
 800124e:	fb83 2301 	smull	r2, r3, r3, r1
 8001252:	109a      	asrs	r2, r3, #2
 8001254:	17cb      	asrs	r3, r1, #31
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	1aca      	subs	r2, r1, r3
 8001262:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <fsm_manual+0x904>)
 8001264:	605a      	str	r2, [r3, #4]
			led_buffer[2] = red/10;
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <fsm_manual+0x908>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a29      	ldr	r2, [pc, #164]	@ (8001310 <fsm_manual+0x900>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1092      	asrs	r2, r2, #2
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <fsm_manual+0x904>)
 8001278:	6093      	str	r3, [r2, #8]
			led_buffer[3] = red%10;
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <fsm_manual+0x908>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <fsm_manual+0x900>)
 8001280:	fb83 2301 	smull	r2, r3, r3, r1
 8001284:	109a      	asrs	r2, r3, #2
 8001286:	17cb      	asrs	r3, r1, #31
 8001288:	1ad2      	subs	r2, r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	1aca      	subs	r2, r1, r3
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <fsm_manual+0x904>)
 8001296:	60da      	str	r2, [r3, #12]
			yellow--;
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <fsm_manual+0x91c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a23      	ldr	r2, [pc, #140]	@ (800132c <fsm_manual+0x91c>)
 80012a0:	6013      	str	r3, [r2, #0]
			red--;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <fsm_manual+0x908>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <fsm_manual+0x908>)
 80012aa:	6013      	str	r3, [r2, #0]
			if(yellow == 0)
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <fsm_manual+0x91c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10a      	bne.n	80012ca <fsm_manual+0x8ba>
			{
				red = red_time;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <fsm_manual+0x914>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <fsm_manual+0x908>)
 80012ba:	6013      	str	r3, [r2, #0]
				yellow = yellow_time;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <fsm_manual+0x918>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <fsm_manual+0x91c>)
 80012c2:	6013      	str	r3, [r2, #0]
				status = MAN_RED_GREEN;
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <fsm_manual+0x910>)
 80012c6:	2206      	movs	r2, #6
 80012c8:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 80012ca:	f7ff f969 	bl	80005a0 <isButton2Pressed>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d011      	beq.n	80012f8 <fsm_manual+0x8e8>
			{
				clear();
 80012d4:	f000 fafe 	bl	80018d4 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <fsm_manual+0x914>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <fsm_manual+0x918>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <fsm_manual+0x90c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <fsm_manual+0x910>)
 80012ec:	220a      	movs	r2, #10
 80012ee:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 80012f0:	2114      	movs	r1, #20
 80012f2:	2003      	movs	r0, #3
 80012f4:	f000 f946 	bl	8001584 <set_timer>
			}
			set_timer(9, 1000);
 80012f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012fc:	2009      	movs	r0, #9
 80012fe:	f000 f941 	bl	8001584 <set_timer>
			break;
 8001302:	e000      	b.n	8001306 <fsm_manual+0x8f6>
//			led_buffer[3] = 0;
//			status = MANUAL_INIT;
//			set_timer(9, 1);
//			break;
		default:
			break;
 8001304:	bf00      	nop
			}
	}

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000a0 	.word	0x200000a0
 8001310:	66666667 	.word	0x66666667
 8001314:	20000074 	.word	0x20000074
 8001318:	20000098 	.word	0x20000098
 800131c:	20000094 	.word	0x20000094
 8001320:	20000034 	.word	0x20000034
 8001324:	2000008c 	.word	0x2000008c
 8001328:	20000090 	.word	0x20000090
 800132c:	2000009c 	.word	0x2000009c

08001330 <fsm_setting>:
[ *  Created on: Oct 30, 2025
 *      Author: Admin
 */
#include "fsm_setting.h"

void fsm_setting(){}
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f000 fbb4 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f824 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 f8aa 	bl	80014a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800134c:	f000 f85c 	bl	8001408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001350:	480d      	ldr	r0, [pc, #52]	@ (8001388 <main+0x4c>)
 8001352:	f001 fb0d 	bl	8002970 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_timer(1, 1);
 8001356:	2101      	movs	r1, #1
 8001358:	2001      	movs	r0, #1
 800135a:	f000 f913 	bl	8001584 <set_timer>
  while (1)
  {
	  fsm_auto();
 800135e:	f7ff fa29 	bl	80007b4 <fsm_auto>
	  fsm_manual();
 8001362:	f7ff fb55 	bl	8000a10 <fsm_manual>
	  fsm_setting();
 8001366:	f7ff ffe3 	bl	8001330 <fsm_setting>
	  if(is_timer_expired(1))
 800136a:	2001      	movs	r0, #1
 800136c:	f000 f960 	bl	8001630 <is_timer_expired>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f3      	beq.n	800135e <main+0x22>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001376:	2120      	movs	r1, #32
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <main+0x50>)
 800137a:	f000 feb2 	bl	80020e2 <HAL_GPIO_TogglePin>
		  set_timer(1, 200);
 800137e:	21c8      	movs	r1, #200	@ 0xc8
 8001380:	2001      	movs	r0, #1
 8001382:	f000 f8ff 	bl	8001584 <set_timer>
	  fsm_auto();
 8001386:	e7ea      	b.n	800135e <main+0x22>
 8001388:	200000a4 	.word	0x200000a4
 800138c:	40010800 	.word	0x40010800

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	@ 0x40
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	@ 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fe72 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b6:	2301      	movs	r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ba:	2310      	movs	r3, #16
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fea4 	bl	8002114 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013d2:	f000 f8d1 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f912 	bl	8002618 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013fa:	f000 f8bd 	bl	8001578 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	@ 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM2_Init+0x94>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_TIM2_Init+0x94>)
 800142e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_TIM2_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM2_Init+0x94>)
 800143c:	2209      	movs	r2, #9
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM2_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM2_Init+0x94>)
 800144e:	f001 fa3f 	bl	80028d0 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001458:	f000 f88e 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM2_Init+0x94>)
 800146a:	f001 fbbd 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 f880 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM2_Init+0x94>)
 8001486:	f001 fd95 	bl	8002fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001490:	f000 f872 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000a4 	.word	0x200000a4

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a27      	ldr	r2, [pc, #156]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_GPIO_Init+0xb8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_timer_Pin|led_button_Pin|en0_Pin|en1_Pin
 80014e4:	2200      	movs	r2, #0
 80014e6:	f24f 01a0 	movw	r1, #61600	@ 0xf0a0
 80014ea:	481c      	ldr	r0, [pc, #112]	@ (800155c <MX_GPIO_Init+0xbc>)
 80014ec:	f000 fde1 	bl	80020b2 <HAL_GPIO_WritePin>
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|r1_Pin
 80014f0:	2200      	movs	r2, #0
 80014f2:	f247 31ff 	movw	r1, #29695	@ 0x73ff
 80014f6:	481a      	ldr	r0, [pc, #104]	@ (8001560 <MX_GPIO_Init+0xc0>)
 80014f8:	f000 fddb 	bl	80020b2 <HAL_GPIO_WritePin>
                          |y1_Pin|g1_Pin|d_Pin|e_Pin
                          |f_Pin|g_Pin|r0_Pin|y0_Pin
                          |g0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : btn1_Pin btn2_Pin btn3_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn2_Pin|btn3_Pin;
 80014fc:	230e      	movs	r3, #14
 80014fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4619      	mov	r1, r3
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <MX_GPIO_Init+0xbc>)
 8001510:	f000 fc3c 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_timer_Pin led_button_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = led_timer_Pin|led_button_Pin|en0_Pin|en1_Pin
 8001514:	f24f 03a0 	movw	r3, #61600	@ 0xf0a0
 8001518:	60bb      	str	r3, [r7, #8]
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <MX_GPIO_Init+0xbc>)
 800152e:	f000 fc2d 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin r1_Pin
                           y1_Pin g1_Pin d_Pin e_Pin
                           f_Pin g_Pin r0_Pin y0_Pin
                           g0_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|r1_Pin
 8001532:	f247 33ff 	movw	r3, #29695	@ 0x73ff
 8001536:	60bb      	str	r3, [r7, #8]
                          |y1_Pin|g1_Pin|d_Pin|e_Pin
                          |f_Pin|g_Pin|r0_Pin|y0_Pin
                          |g0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2302      	movs	r3, #2
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_GPIO_Init+0xc0>)
 800154c:	f000 fc1e 	bl	8001d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800
 8001560:	40010c00 	.word	0x40010c00

08001564 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	timer_run();
 800156c:	f000 f830 	bl	80015d0 <timer_run>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <set_timer>:
int tick = 10;
int timer_flag[MAX_TIMERS];
int timer_counter[MAX_TIMERS];

void set_timer(int index, int counter)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= MAX_TIMERS) return;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db11      	blt.n	80015b8 <set_timer+0x34>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b09      	cmp	r3, #9
 8001598:	dc0e      	bgt.n	80015b8 <set_timer+0x34>
	timer_flag[index] = 0;
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <set_timer+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2100      	movs	r1, #0
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter/tick;
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <set_timer+0x44>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80015ae:	4907      	ldr	r1, [pc, #28]	@ (80015cc <set_timer+0x48>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80015b6:	e000      	b.n	80015ba <set_timer+0x36>
	if (index < 0 || index >= MAX_TIMERS) return;
 80015b8:	bf00      	nop
}
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000ec 	.word	0x200000ec
 80015c8:	20000038 	.word	0x20000038
 80015cc:	20000114 	.word	0x20000114

080015d0 <timer_run>:
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}

void timer_run()
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMERS; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	e01c      	b.n	8001616 <timer_run+0x46>
	{
		if(timer_counter[i] >= 0)
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <timer_run+0x58>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db13      	blt.n	8001610 <timer_run+0x40>
		{
			timer_counter[i]--;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <timer_run+0x58>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <timer_run+0x58>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <timer_run+0x58>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc04      	bgt.n	8001610 <timer_run+0x40>
			{
				timer_flag[i] = 1;
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <timer_run+0x5c>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2101      	movs	r1, #1
 800160c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_TIMERS; i++)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b09      	cmp	r3, #9
 800161a:	dddf      	ble.n	80015dc <timer_run+0xc>
			}
		}
	}
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000114 	.word	0x20000114
 800162c:	200000ec 	.word	0x200000ec

08001630 <is_timer_expired>:

int is_timer_expired(int index)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if(index < 0 || index >= MAX_TIMERS)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db02      	blt.n	8001644 <is_timer_expired+0x14>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b09      	cmp	r3, #9
 8001642:	dd02      	ble.n	800164a <is_timer_expired+0x1a>
	{
		return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e003      	b.n	8001652 <is_timer_expired+0x22>
	}
	return timer_flag[index];
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <is_timer_expired+0x2c>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200000ec 	.word	0x200000ec

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <HAL_MspInit+0x5c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_MspInit+0x5c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_MspInit+0x60>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_MspInit+0x60>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d4:	d113      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_TIM_Base_MspInit+0x44>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_TIM_Base_MspInit+0x44>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_TIM_Base_MspInit+0x44>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	201c      	movs	r0, #28
 80016f4:	f000 fb13 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016f8:	201c      	movs	r0, #28
 80016fa:	f000 fb2c 	bl	8001d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f9ec 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <TIM2_IRQHandler+0x10>)
 800176a:	f001 f94d 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200000a4 	.word	0x200000a4

08001778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <led_red_and_green>:
[ *  Created on: Oct 30, 2025
 *      Author: Admin
 */
#include "traffic_light.h"

void led_red_and_green(){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	4811      	ldr	r0, [pc, #68]	@ (80017d4 <led_red_and_green+0x50>)
 800178e:	f000 fc90 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001798:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <led_red_and_green+0x50>)
 800179a:	f000 fc8a 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a4:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <led_red_and_green+0x50>)
 80017a6:	f000 fc84 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b0:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <led_red_and_green+0x50>)
 80017b2:	f000 fc7e 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <led_red_and_green+0x50>)
 80017be:	f000 fc78 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <led_red_and_green+0x50>)
 80017ca:	f000 fc72 	bl	80020b2 <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010c00 	.word	0x40010c00

080017d8 <led_red_and_yellow>:

void led_red_and_yellow(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	@ 0x80
 80017e0:	4811      	ldr	r0, [pc, #68]	@ (8001828 <led_red_and_yellow+0x50>)
 80017e2:	f000 fc66 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ec:	480e      	ldr	r0, [pc, #56]	@ (8001828 <led_red_and_yellow+0x50>)
 80017ee:	f000 fc60 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <led_red_and_yellow+0x50>)
 80017fa:	f000 fc5a 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001804:	4808      	ldr	r0, [pc, #32]	@ (8001828 <led_red_and_yellow+0x50>)
 8001806:	f000 fc54 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <led_red_and_yellow+0x50>)
 8001812:	f000 fc4e 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <led_red_and_yellow+0x50>)
 800181e:	f000 fc48 	bl	80020b2 <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40010c00 	.word	0x40010c00

0800182c <led_green_and_red>:

void led_green_and_red(){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <led_green_and_red+0x50>)
 8001836:	f000 fc3c 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001840:	480e      	ldr	r0, [pc, #56]	@ (800187c <led_green_and_red+0x50>)
 8001842:	f000 fc36 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800184c:	480b      	ldr	r0, [pc, #44]	@ (800187c <led_green_and_red+0x50>)
 800184e:	f000 fc30 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001858:	4808      	ldr	r0, [pc, #32]	@ (800187c <led_green_and_red+0x50>)
 800185a:	f000 fc2a 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <led_green_and_red+0x50>)
 8001866:	f000 fc24 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <led_green_and_red+0x50>)
 8001872:	f000 fc1e 	bl	80020b2 <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010c00 	.word	0x40010c00

08001880 <led_yellow_and_red>:

void led_yellow_and_red(){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	4811      	ldr	r0, [pc, #68]	@ (80018d0 <led_yellow_and_red+0x50>)
 800188a:	f000 fc12 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001894:	480e      	ldr	r0, [pc, #56]	@ (80018d0 <led_yellow_and_red+0x50>)
 8001896:	f000 fc0c 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a0:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <led_yellow_and_red+0x50>)
 80018a2:	f000 fc06 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ac:	4808      	ldr	r0, [pc, #32]	@ (80018d0 <led_yellow_and_red+0x50>)
 80018ae:	f000 fc00 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <led_yellow_and_red+0x50>)
 80018ba:	f000 fbfa 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <led_yellow_and_red+0x50>)
 80018c6:	f000 fbf4 	bl	80020b2 <HAL_GPIO_WritePin>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <clear>:

void clear()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2180      	movs	r1, #128	@ 0x80
 80018dc:	4811      	ldr	r0, [pc, #68]	@ (8001924 <clear+0x50>)
 80018de:	f000 fbe8 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e8:	480e      	ldr	r0, [pc, #56]	@ (8001924 <clear+0x50>)
 80018ea:	f000 fbe2 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f4:	480b      	ldr	r0, [pc, #44]	@ (8001924 <clear+0x50>)
 80018f6:	f000 fbdc 	bl	80020b2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <clear+0x50>)
 8001902:	f000 fbd6 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <clear+0x50>)
 800190e:	f000 fbd0 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <clear+0x50>)
 800191a:	f000 fbca 	bl	80020b2 <HAL_GPIO_WritePin>
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40010c00 	.word	0x40010c00

08001928 <toggle>:

void toggle()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	480f      	ldr	r0, [pc, #60]	@ (800196c <toggle+0x44>)
 8001930:	f000 fbd7 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <toggle+0x44>)
 800193a:	f000 fbd2 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800193e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001942:	480a      	ldr	r0, [pc, #40]	@ (800196c <toggle+0x44>)
 8001944:	f000 fbcd 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001948:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800194c:	4807      	ldr	r0, [pc, #28]	@ (800196c <toggle+0x44>)
 800194e:	f000 fbc8 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <toggle+0x44>)
 8001958:	f000 fbc3 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800195c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <toggle+0x44>)
 8001962:	f000 fbbe 	bl	80020e2 <HAL_GPIO_TogglePin>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40010c00 	.word	0x40010c00

08001970 <togglered>:

void togglered()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197a:	4810      	ldr	r0, [pc, #64]	@ (80019bc <togglered+0x4c>)
 800197c:	f000 fb99 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <togglered+0x4c>)
 8001988:	f000 fb93 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001992:	480a      	ldr	r0, [pc, #40]	@ (80019bc <togglered+0x4c>)
 8001994:	f000 fb8d 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800199e:	4807      	ldr	r0, [pc, #28]	@ (80019bc <togglered+0x4c>)
 80019a0:	f000 fb87 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <togglered+0x4c>)
 80019a8:	f000 fb9b 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80019ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <togglered+0x4c>)
 80019b2:	f000 fb96 	bl	80020e2 <HAL_GPIO_TogglePin>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010c00 	.word	0x40010c00

080019c0 <toggleyellow>:
void toggleyellow()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <toggleyellow+0x4c>)
 80019ca:	f000 fb72 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <toggleyellow+0x4c>)
 80019d6:	f000 fb6c 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e0:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <toggleyellow+0x4c>)
 80019e2:	f000 fb66 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <toggleyellow+0x4c>)
 80019ee:	f000 fb60 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80019f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <toggleyellow+0x4c>)
 80019f8:	f000 fb73 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80019fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <toggleyellow+0x4c>)
 8001a02:	f000 fb6e 	bl	80020e2 <HAL_GPIO_TogglePin>
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40010c00 	.word	0x40010c00

08001a10 <togglegreen>:
void togglegreen()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <togglegreen+0x4c>)
 8001a1a:	f000 fb4a 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a24:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <togglegreen+0x4c>)
 8001a26:	f000 fb44 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a30:	480a      	ldr	r0, [pc, #40]	@ (8001a5c <togglegreen+0x4c>)
 8001a32:	f000 fb3e 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a3c:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <togglegreen+0x4c>)
 8001a3e:	f000 fb38 	bl	80020b2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001a42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <togglegreen+0x4c>)
 8001a48:	f000 fb4b 	bl	80020e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001a4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <togglegreen+0x4c>)
 8001a52:	f000 fb46 	bl	80020e2 <HAL_GPIO_TogglePin>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40010c00 	.word	0x40010c00

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff fe8a 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a66:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a7c:	4c09      	ldr	r4, [pc, #36]	@ (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f001 fb05 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7ff fc55 	bl	800133c <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001a9c:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 8001aa0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001aa4:	20000140 	.word	0x20000140

08001aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_2_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_Init+0x28>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f923 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fdca 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f93b 	bl	8001d72 <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f903 	bl	8001d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000003c 	.word	0x2000003c
 8001b30:	20000044 	.word	0x20000044
 8001b34:	20000040 	.word	0x20000040

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000044 	.word	0x20000044
 8001b58:	2000013c 	.word	0x2000013c

08001b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	@ (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	2000013c 	.word	0x2000013c

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4906      	ldr	r1, [pc, #24]	@ (8001c08 <__NVIC_EnableIRQ+0x34>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd4:	d301      	bcc.n	8001cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00f      	b.n	8001cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <SysTick_Config+0x40>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f7ff ff90 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <SysTick_Config+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <SysTick_Config+0x40>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff2d 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d30:	f7ff ff42 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	6978      	ldr	r0, [r7, #20]
 8001d3c:	f7ff ff90 	bl	8001c60 <NVIC_EncodePriority>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff5f 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff35 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffa2 	bl	8001cc4 <SysTick_Config>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	@ 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e161      	b.n	8002064 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da0:	2201      	movs	r2, #1
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 8150 	bne.w	800205e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a97      	ldr	r2, [pc, #604]	@ (8002020 <HAL_GPIO_Init+0x294>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d05e      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a95      	ldr	r2, [pc, #596]	@ (8002020 <HAL_GPIO_Init+0x294>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d875      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dce:	4a95      	ldr	r2, [pc, #596]	@ (8002024 <HAL_GPIO_Init+0x298>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d058      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a93      	ldr	r2, [pc, #588]	@ (8002024 <HAL_GPIO_Init+0x298>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d86f      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dda:	4a93      	ldr	r2, [pc, #588]	@ (8002028 <HAL_GPIO_Init+0x29c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d052      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001de0:	4a91      	ldr	r2, [pc, #580]	@ (8002028 <HAL_GPIO_Init+0x29c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d869      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001de6:	4a91      	ldr	r2, [pc, #580]	@ (800202c <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d04c      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dec:	4a8f      	ldr	r2, [pc, #572]	@ (800202c <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d863      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001df2:	4a8f      	ldr	r2, [pc, #572]	@ (8002030 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d046      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001df8:	4a8d      	ldr	r2, [pc, #564]	@ (8002030 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d85d      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d82a      	bhi.n	8001e58 <HAL_GPIO_Init+0xcc>
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d859      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001e06:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <HAL_GPIO_Init+0x80>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e87 	.word	0x08001e87
 8001e10:	08001e61 	.word	0x08001e61
 8001e14:	08001e73 	.word	0x08001e73
 8001e18:	08001eb5 	.word	0x08001eb5
 8001e1c:	08001ebb 	.word	0x08001ebb
 8001e20:	08001ebb 	.word	0x08001ebb
 8001e24:	08001ebb 	.word	0x08001ebb
 8001e28:	08001ebb 	.word	0x08001ebb
 8001e2c:	08001ebb 	.word	0x08001ebb
 8001e30:	08001ebb 	.word	0x08001ebb
 8001e34:	08001ebb 	.word	0x08001ebb
 8001e38:	08001ebb 	.word	0x08001ebb
 8001e3c:	08001ebb 	.word	0x08001ebb
 8001e40:	08001ebb 	.word	0x08001ebb
 8001e44:	08001ebb 	.word	0x08001ebb
 8001e48:	08001ebb 	.word	0x08001ebb
 8001e4c:	08001ebb 	.word	0x08001ebb
 8001e50:	08001e69 	.word	0x08001e69
 8001e54:	08001e7d 	.word	0x08001e7d
 8001e58:	4a76      	ldr	r2, [pc, #472]	@ (8002034 <HAL_GPIO_Init+0x2a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e5e:	e02c      	b.n	8001eba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e029      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e024      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	3308      	adds	r3, #8
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e01f      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	330c      	adds	r3, #12
 8001e82:	623b      	str	r3, [r7, #32]
          break;
 8001e84:	e01a      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e013      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	611a      	str	r2, [r3, #16]
          break;
 8001ea6:	e009      	b.n	8001ebc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	615a      	str	r2, [r3, #20]
          break;
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          break;
 8001eba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	@ 0xff
 8001ec0:	d801      	bhi.n	8001ec6 <HAL_GPIO_Init+0x13a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	e001      	b.n	8001eca <HAL_GPIO_Init+0x13e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	@ 0xff
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_GPIO_Init+0x14c>
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x152>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	3b08      	subs	r3, #8
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a9 	beq.w	800205e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <HAL_GPIO_Init+0x2ac>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a49      	ldr	r2, [pc, #292]	@ (8002038 <HAL_GPIO_Init+0x2ac>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b47      	ldr	r3, [pc, #284]	@ (8002038 <HAL_GPIO_Init+0x2ac>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f24:	4a45      	ldr	r2, [pc, #276]	@ (800203c <HAL_GPIO_Init+0x2b0>)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002040 <HAL_GPIO_Init+0x2b4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_GPIO_Init+0x1e0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3c      	ldr	r2, [pc, #240]	@ (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <HAL_GPIO_Init+0x1dc>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002048 <HAL_GPIO_Init+0x2bc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_GPIO_Init+0x1d8>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7e:	492f      	ldr	r1, [pc, #188]	@ (800203c <HAL_GPIO_Init+0x2b0>)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	492b      	ldr	r1, [pc, #172]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa6:	4b29      	ldr	r3, [pc, #164]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4927      	ldr	r1, [pc, #156]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc0:	4b22      	ldr	r3, [pc, #136]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4921      	ldr	r1, [pc, #132]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fce:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	491d      	ldr	r1, [pc, #116]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe8:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4917      	ldr	r1, [pc, #92]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4913      	ldr	r1, [pc, #76]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8002000:	4013      	ands	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01f      	beq.n	8002050 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	490d      	ldr	r1, [pc, #52]	@ (800204c <HAL_GPIO_Init+0x2c0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	e01f      	b.n	800205e <HAL_GPIO_Init+0x2d2>
 800201e:	bf00      	nop
 8002020:	10320000 	.word	0x10320000
 8002024:	10310000 	.word	0x10310000
 8002028:	10220000 	.word	0x10220000
 800202c:	10210000 	.word	0x10210000
 8002030:	10120000 	.word	0x10120000
 8002034:	10110000 	.word	0x10110000
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000
 8002040:	40010800 	.word	0x40010800
 8002044:	40010c00 	.word	0x40010c00
 8002048:	40011000 	.word	0x40011000
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_GPIO_Init+0x2f4>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	@ (8002080 <HAL_GPIO_Init+0x2f4>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae96 	bne.w	8001da0 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	@ 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43d9      	mvns	r1, r3
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e272      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b92      	ldr	r3, [pc, #584]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002140:	4b8f      	ldr	r3, [pc, #572]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 800214c:	4b8c      	ldr	r3, [pc, #560]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b89      	ldr	r3, [pc, #548]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e24c      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b80      	ldr	r3, [pc, #512]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7f      	ldr	r2, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7b      	ldr	r3, [pc, #492]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b78      	ldr	r3, [pc, #480]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a77      	ldr	r2, [pc, #476]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a67      	ldr	r2, [pc, #412]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fcb4 	bl	8001b5c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fcb0 	bl	8001b5c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e200      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5d      	ldr	r3, [pc, #372]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fca0 	bl	8001b5c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fc9c 	bl	8001b5c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1ec      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225a:	4b49      	ldr	r3, [pc, #292]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c0      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4939      	ldr	r1, [pc, #228]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff fc55 	bl	8001b5c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fc51 	bl	8001b5c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fc34 	bl	8001b5c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7ff fc30 	bl	8001b5c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e180      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03a      	beq.n	8002398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff fc14 	bl	8001b5c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fc10 	bl	8001b5c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e160      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 fa9c 	bl	8002894 <RCC_Delay>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fbfa 	bl	8001b5c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fbf6 	bl	8001b5c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d908      	bls.n	800238c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e146      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000
 8002388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b92      	ldr	r3, [pc, #584]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a6 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b8b      	ldr	r3, [pc, #556]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a87      	ldr	r2, [pc, #540]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b85      	ldr	r3, [pc, #532]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b7f      	ldr	r3, [pc, #508]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff fbb7 	bl	8001b5c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff fbb3 	bl	8001b5c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	@ 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e103      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 8002418:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a6e      	ldr	r2, [pc, #440]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x334>
 800242e:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a69      	ldr	r2, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a66      	ldr	r2, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x356>
 8002450:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a5a      	ldr	r2, [pc, #360]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff fb67 	bl	8001b5c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff fb63 	bl	8001b5c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0b1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fb51 	bl	8001b5c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fb4d 	bl	8001b5c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e09b      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b3c      	ldr	r3, [pc, #240]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fb21 	bl	8001b5c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fb1d 	bl	8001b5c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e06d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4921      	ldr	r1, [pc, #132]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	430b      	orrs	r3, r1
 800256a:	491b      	ldr	r1, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff faf1 	bl	8001b5c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff faed 	bl	8001b5c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
 800259c:	e035      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fada 	bl	8001b5c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fad6 	bl	8001b5c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e026      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
 80025ca:	e01e      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e019      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_OscConfig+0x500>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d0      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b67      	ldr	r3, [pc, #412]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4965      	ldr	r1, [pc, #404]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800267e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e073      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4936      	ldr	r1, [pc, #216]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7ff fa28 	bl	8001b5c <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7ff fa24 	bl	8001b5c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e053      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4922      	ldr	r1, [pc, #136]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1d0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f986 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	080030f8 	.word	0x080030f8
 80027e4:	2000003c 	.word	0x2000003c
 80027e8:	20000040 	.word	0x20000040

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e027      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e027      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0c5b      	lsrs	r3, r3, #17
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e004      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	693b      	ldr	r3, [r7, #16]
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	08003108 	.word	0x08003108
 800288c:	08003118 	.word	0x08003118
 8002890:	003d0900 	.word	0x003d0900

08002894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <RCC_Delay+0x34>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <RCC_Delay+0x38>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a5b      	lsrs	r3, r3, #9
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b0:	bf00      	nop
  }
  while (Delay --);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <RCC_Delay+0x1c>
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	2000003c 	.word	0x2000003c
 80028cc:	10624dd3 	.word	0x10624dd3

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e041      	b.n	8002966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fee4 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 fa56 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e035      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a16      	ldr	r2, [pc, #88]	@ (8002a00 <HAL_TIM_Base_Start_IT+0x90>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d004      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <HAL_TIM_Base_Start_IT+0x94>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d111      	bne.n	80029e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d010      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e007      	b.n	80029f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0202 	mvn.w	r2, #2
 8002a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f998 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f98b 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f99a 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d020      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0204 	mvn.w	r2, #4
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f972 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f965 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f974 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0208 	mvn.w	r2, #8
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f94c 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f93f 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f94e 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2208      	movs	r2, #8
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f926 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f919 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f928 	bl	8002d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0201 	mvn.w	r2, #1
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe fcf8 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa6f 	bl	8003076 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8f8 	bl	8002dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0220 	mvn.w	r2, #32
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa42 	bl	8003064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0b4      	b.n	8002d6e <HAL_TIM_ConfigClockSource+0x186>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3c:	d03e      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0xd4>
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c42:	f200 8087 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4a:	f000 8086 	beq.w	8002d5a <HAL_TIM_ConfigClockSource+0x172>
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c52:	d87f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b70      	cmp	r3, #112	@ 0x70
 8002c56:	d01a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xa6>
 8002c58:	2b70      	cmp	r3, #112	@ 0x70
 8002c5a:	d87b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b60      	cmp	r3, #96	@ 0x60
 8002c5e:	d050      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x11a>
 8002c60:	2b60      	cmp	r3, #96	@ 0x60
 8002c62:	d877      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b50      	cmp	r3, #80	@ 0x50
 8002c66:	d03c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c68:	2b50      	cmp	r3, #80	@ 0x50
 8002c6a:	d873      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d058      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x13a>
 8002c70:	2b40      	cmp	r3, #64	@ 0x40
 8002c72:	d86f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b30      	cmp	r3, #48	@ 0x30
 8002c76:	d064      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	2b30      	cmp	r3, #48	@ 0x30
 8002c7a:	d86b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d060      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d867      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05c      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d05a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	e062      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c9e:	f000 f96a 	bl	8002f76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
      break;
 8002cba:	e04f      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	f000 f953 	bl	8002f76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cde:	609a      	str	r2, [r3, #8]
      break;
 8002ce0:	e03c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 f8ca 	bl	8002e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2150      	movs	r1, #80	@ 0x50
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f921 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e02c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8e8 	bl	8002ee4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2160      	movs	r1, #96	@ 0x60
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f911 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e01c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f8aa 	bl	8002e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2140      	movs	r1, #64	@ 0x40
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f901 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 f8f8 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
	...

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <TIM_Base_SetConfig+0xc0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_Base_SetConfig+0x28>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dde:	d003      	beq.n	8002de8 <TIM_Base_SetConfig+0x28>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <TIM_Base_SetConfig+0xc4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <TIM_Base_SetConfig+0xc0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <TIM_Base_SetConfig+0x52>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0x52>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <TIM_Base_SetConfig+0xc4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d108      	bne.n	8002e24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <TIM_Base_SetConfig+0xc0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d103      	bne.n	8002e58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]
  }
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400

08002e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0201 	bic.w	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 030a 	bic.w	r3, r3, #10
 8002ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0210 	bic.w	r2, r3, #16
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	031b      	lsls	r3, r3, #12
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 0307 	orr.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e041      	b.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a14      	ldr	r2, [pc, #80]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003018:	d004      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a10      	ldr	r2, [pc, #64]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400

08003064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <memset>:
 8003088:	4603      	mov	r3, r0
 800308a:	4402      	add	r2, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	2600      	movs	r6, #0
 800309c:	4d0c      	ldr	r5, [pc, #48]	@ (80030d0 <__libc_init_array+0x38>)
 800309e:	4c0d      	ldr	r4, [pc, #52]	@ (80030d4 <__libc_init_array+0x3c>)
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	f000 f81a 	bl	80030e0 <_init>
 80030ac:	2600      	movs	r6, #0
 80030ae:	4d0a      	ldr	r5, [pc, #40]	@ (80030d8 <__libc_init_array+0x40>)
 80030b0:	4c0a      	ldr	r4, [pc, #40]	@ (80030dc <__libc_init_array+0x44>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	0800311c 	.word	0x0800311c
 80030d4:	0800311c 	.word	0x0800311c
 80030d8:	0800311c 	.word	0x0800311c
 80030dc:	08003120 	.word	0x08003120

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr
